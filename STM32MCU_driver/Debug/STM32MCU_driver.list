
STM32MCU_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002554  08002554  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002554  08002554  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002554  08002554  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002558  08002558  00012558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800255c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  080025d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080025d4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a02  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a63  00000000  00000000  00023aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002d0  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000268  00000000  00000000  000247d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003908  00000000  00000000  00024a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000027bf  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c0fe  00000000  00000000  0002ab07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011a4  00000000  00000000  00036c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800244c 	.word	0x0800244c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800244c 	.word	0x0800244c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) /* We need to Enable or Disable the GPIO port register clock Which is Hanging on AHB1 Bus*/
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d161      	bne.n	8000346 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a32      	ldr	r2, [pc, #200]	; (8000350 <GPIO_PeriClockControl+0xe0>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();              /* GPIOA_PCLK_EN () this is defined on the stm32f407.h file*/
 800028a:	4b32      	ldr	r3, [pc, #200]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028e:	4a31      	ldr	r2, [pc, #196]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000296:	e056      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <GPIO_PeriClockControl+0xe8>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();             /* GPIOB_PCLK_EN () this is defined on the stm32f407.h file*/
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a4:	4a2b      	ldr	r2, [pc, #172]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ac:	e04b      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <GPIO_PeriClockControl+0xec>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();             /* GPIOC_PCLK_EN () this is defined on the stm32f407.h file*/
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ba:	4a26      	ldr	r2, [pc, #152]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c2:	e040      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a26      	ldr	r2, [pc, #152]	; (8000360 <GPIO_PeriClockControl+0xf0>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d106      	bne.n	80002da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();             /* GPIOD_PCLK_EN () this is defined on the stm32f407.h file*/
 80002cc:	4b21      	ldr	r3, [pc, #132]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d8:	e035      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a21      	ldr	r2, [pc, #132]	; (8000364 <GPIO_PeriClockControl+0xf4>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();             /* GPIOE_PCLK_EN () this is defined on the stm32f407.h file*/
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ee:	e02a      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <GPIO_PeriClockControl+0xf8>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();             /* GPIOF_PCLK_EN () this is defined on the stm32f407.h file*/
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a15      	ldr	r2, [pc, #84]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000304:	e01f      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a18      	ldr	r2, [pc, #96]	; (800036c <GPIO_PeriClockControl+0xfc>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();             /* GPIOG_PCLK_EN () this is defined on the stm32f407.h file*/
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a10      	ldr	r2, [pc, #64]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 8000314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031a:	e014      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <GPIO_PeriClockControl+0x100>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();             /* GPIOH_PCLK_EN () this is defined on the stm32f407.h file*/
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 800032a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e009      	b.n	8000346 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a0f      	ldr	r2, [pc, #60]	; (8000374 <GPIO_PeriClockControl+0x104>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d105      	bne.n	8000346 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();             /* GPIOI_PCLK_EN () this is defined on the stm32f407.h file*/
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <GPIO_PeriClockControl+0xe4>)
 8000340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40020000 	.word	0x40020000
 8000354:	40023800 	.word	0x40023800
 8000358:	40020400 	.word	0x40020400
 800035c:	40020800 	.word	0x40020800
 8000360:	40020c00 	.word	0x40020c00
 8000364:	40021000 	.word	0x40021000
 8000368:	40021400 	.word	0x40021400
 800036c:	40021800 	.word	0x40021800
 8000370:	40021c00 	.word	0x40021c00
 8000374:	40022000 	.word	0x40022000

08000378 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE); /* The above GPIO_PeriClockControl function is used here where arguments are passed GPIO port adress and ENABLE */
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff70 	bl	8000270 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)/*if GPIO_PINMode is less than or equal GPIO_MODE_ANALOG than it is a non interrupt mode*/
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	795b      	ldrb	r3, [r3, #5]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d820      	bhi.n	80003da <GPIO_Init+0x62>
	/*GPIO_PinConfig is a member element of Pointer type structure pGPIOHandle, so this element is accessed by -> operator and GPIO_PinMOde is a member of non pointer type structure so this is accessed by a . operator */
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );/* each pin occupies two bit fields so we use bitwise left shiftting for evrery 2 bits. If pin is 0 then 2x0= 0, the oth bit ,pin=1, 2x1=2 ,the 2th bit. and so on changes the bit position according to the pin number.*/
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	461a      	mov	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	791b      	ldrb	r3, [r3, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bit this is safe to clear the bits before set bit. 1 1 in binary is equvalent of 0x3 in hex. Using not along with and we can clear a bit.
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	2103      	movs	r1, #3
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	43db      	mvns	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting the bit 1 in the bit positions
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6819      	ldr	r1, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	430a      	orrs	r2, r1
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	e0cb      	b.n	8000572 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d117      	bne.n	8000412 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e2:	4b4b      	ldr	r3, [pc, #300]	; (8000510 <GPIO_Init+0x198>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a47      	ldr	r2, [pc, #284]	; (8000510 <GPIO_Init+0x198>)
 80003f4:	430b      	orrs	r3, r1
 80003f6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <GPIO_Init+0x198>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	7912      	ldrb	r2, [r2, #4]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	43d2      	mvns	r2, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a41      	ldr	r2, [pc, #260]	; (8000510 <GPIO_Init+0x198>)
 800040c:	400b      	ands	r3, r1
 800040e:	6093      	str	r3, [r2, #8]
 8000410:	e035      	b.n	800047e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	2b05      	cmp	r3, #5
 8000418:	d117      	bne.n	800044a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041a:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <GPIO_Init+0x198>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	4611      	mov	r1, r2
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <GPIO_Init+0x198>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000430:	4b37      	ldr	r3, [pc, #220]	; (8000510 <GPIO_Init+0x198>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	7912      	ldrb	r2, [r2, #4]
 8000438:	4611      	mov	r1, r2
 800043a:	2201      	movs	r2, #1
 800043c:	408a      	lsls	r2, r1
 800043e:	43d2      	mvns	r2, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a33      	ldr	r2, [pc, #204]	; (8000510 <GPIO_Init+0x198>)
 8000444:	400b      	ands	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
 8000448:	e019      	b.n	800047e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	795b      	ldrb	r3, [r3, #5]
 800044e:	2b06      	cmp	r3, #6
 8000450:	d115      	bne.n	800047e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000452:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <GPIO_Init+0x198>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	4611      	mov	r1, r2
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	4611      	mov	r1, r2
 8000462:	4a2b      	ldr	r2, [pc, #172]	; (8000510 <GPIO_Init+0x198>)
 8000464:	430b      	orrs	r3, r1
 8000466:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <GPIO_Init+0x198>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	4611      	mov	r1, r2
 8000472:	2201      	movs	r2, #1
 8000474:	408a      	lsls	r2, r1
 8000476:	4611      	mov	r1, r2
 8000478:	4a25      	ldr	r2, [pc, #148]	; (8000510 <GPIO_Init+0x198>)
 800047a:	430b      	orrs	r3, r1
 800047c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	089b      	lsrs	r3, r3, #2
 8000484:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	f003 0303 	and.w	r3, r3, #3
 800048e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1f      	ldr	r2, [pc, #124]	; (8000514 <GPIO_Init+0x19c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d04e      	beq.n	8000538 <GPIO_Init+0x1c0>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <GPIO_Init+0x1a0>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d032      	beq.n	800050a <GPIO_Init+0x192>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a1c      	ldr	r2, [pc, #112]	; (800051c <GPIO_Init+0x1a4>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d02b      	beq.n	8000506 <GPIO_Init+0x18e>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_Init+0x1a8>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d024      	beq.n	8000502 <GPIO_Init+0x18a>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a19      	ldr	r2, [pc, #100]	; (8000524 <GPIO_Init+0x1ac>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d01d      	beq.n	80004fe <GPIO_Init+0x186>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <GPIO_Init+0x1b0>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d016      	beq.n	80004fa <GPIO_Init+0x182>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a16      	ldr	r2, [pc, #88]	; (800052c <GPIO_Init+0x1b4>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d00f      	beq.n	80004f6 <GPIO_Init+0x17e>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <GPIO_Init+0x1b8>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d008      	beq.n	80004f2 <GPIO_Init+0x17a>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <GPIO_Init+0x1bc>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <GPIO_Init+0x176>
 80004ea:	2308      	movs	r3, #8
 80004ec:	e025      	b.n	800053a <GPIO_Init+0x1c2>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e023      	b.n	800053a <GPIO_Init+0x1c2>
 80004f2:	2307      	movs	r3, #7
 80004f4:	e021      	b.n	800053a <GPIO_Init+0x1c2>
 80004f6:	2306      	movs	r3, #6
 80004f8:	e01f      	b.n	800053a <GPIO_Init+0x1c2>
 80004fa:	2305      	movs	r3, #5
 80004fc:	e01d      	b.n	800053a <GPIO_Init+0x1c2>
 80004fe:	2304      	movs	r3, #4
 8000500:	e01b      	b.n	800053a <GPIO_Init+0x1c2>
 8000502:	2303      	movs	r3, #3
 8000504:	e019      	b.n	800053a <GPIO_Init+0x1c2>
 8000506:	2302      	movs	r3, #2
 8000508:	e017      	b.n	800053a <GPIO_Init+0x1c2>
 800050a:	2301      	movs	r3, #1
 800050c:	e015      	b.n	800053a <GPIO_Init+0x1c2>
 800050e:	bf00      	nop
 8000510:	40013c00 	.word	0x40013c00
 8000514:	40020000 	.word	0x40020000
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40021000 	.word	0x40021000
 8000528:	40021400 	.word	0x40021400
 800052c:	40021800 	.word	0x40021800
 8000530:	40021c00 	.word	0x40021c00
 8000534:	40022000 	.word	0x40022000
 8000538:	2300      	movs	r3, #0
 800053a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800053c:	4b59      	ldr	r3, [pc, #356]	; (80006a4 <GPIO_Init+0x32c>)
 800053e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000540:	4a58      	ldr	r2, [pc, #352]	; (80006a4 <GPIO_Init+0x32c>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000548:	7c7a      	ldrb	r2, [r7, #17]
 800054a:	7cbb      	ldrb	r3, [r7, #18]
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	fa02 f103 	lsl.w	r1, r2, r3
 8000552:	4a55      	ldr	r2, [pc, #340]	; (80006a8 <GPIO_Init+0x330>)
 8000554:	7cfb      	ldrb	r3, [r7, #19]
 8000556:	3302      	adds	r3, #2
 8000558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800055c:	4b53      	ldr	r3, [pc, #332]	; (80006ac <GPIO_Init+0x334>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a4f      	ldr	r2, [pc, #316]	; (80006ac <GPIO_Init+0x334>)
 800056e:	430b      	orrs	r3, r1
 8000570:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	799b      	ldrb	r3, [r3, #6]
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	2103      	movs	r1, #3
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	79db      	ldrb	r3, [r3, #7]
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68d9      	ldr	r1, [r3, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );// there is no multiplication because in this case each pin occupies only single bit
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a1b      	ldrb	r3, [r3, #8]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	4619      	mov	r1, r3
 800060e:	2301      	movs	r3, #1
 8000610:	408b      	lsls	r3, r1
 8000612:	43db      	mvns	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	400a      	ands	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6859      	ldr	r1, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	430a      	orrs	r2, r1
 800062c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d131      	bne.n	800069a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;// As temp1 is an unsigned integer number the result will be either 0 or 1. If Pin number is between 0 to 7 then it will give zero and for 8 to15 it will give 1.
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;// The rest will be loaded in variable temp2. As example (14%8=6)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing the bit. Each pin occupies 4 bit. So, first 1111=0xF along with and operation with not.
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	7c3a      	ldrb	r2, [r7, #16]
 800064e:	3208      	adds	r2, #8
 8000650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	220f      	movs	r2, #15
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7c3a      	ldrb	r2, [r7, #16]
 8000668:	4001      	ands	r1, r0
 800066a:	3208      	adds	r2, #8
 800066c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	7c3a      	ldrb	r2, [r7, #16]
 8000676:	3208      	adds	r2, #8
 8000678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7a5b      	ldrb	r3, [r3, #9]
 8000680:	461a      	mov	r2, r3
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	7c3a      	ldrb	r2, [r7, #16]
 8000692:	4301      	orrs	r1, r0
 8000694:	3208      	adds	r2, #8
 8000696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40013800 	.word	0x40013800
 80006ac:	40013c00 	.word	0x40013c00

080006b0 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) // We need read the corresponding bit of a certain pin.
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
   uint8_t value; // In IDR(Input Data Register) there are 16 bits usable so each bit corrosponds to each pin. to read the data from a certain pin lets say from pin number 8 we need to right shift it 8 times then the value will be in the 0th bit position. now we and this value with 0x00000001 and then we will get the value.

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691a      	ldr	r2, [r3, #16]
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]

   return value;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	611a      	str	r2, [r3, #16]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	611a      	str	r2, [r3, #16]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	d01f      	beq.n	80007a2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7f1b      	ldrb	r3, [r3, #28]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d112      	bne.n	8000790 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d11f      	bne.n	80007b2 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f931 	bl	80009e0 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800078e:	e010      	b.n	80007b2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	60fb      	str	r3, [r7, #12]
}
 80007a0:	e007      	b.n	80007b2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d106      	bne.n	80007f8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f043 0201 	orr.w	r2, r3, #1
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80007f6:	e005      	b.n	8000804 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f023 0201 	bic.w	r2, r3, #1
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
	...

08000810 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d11f      	bne.n	8000862 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <I2C_PeriClockControl+0x5c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <I2C_PeriClockControl+0x60>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <I2C_PeriClockControl+0x60>)
 8000830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000836:	e014      	b.n	8000862 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <I2C_PeriClockControl+0x64>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <I2C_PeriClockControl+0x60>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <I2C_PeriClockControl+0x60>)
 8000846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084c:	e009      	b.n	8000862 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <I2C_PeriClockControl+0x68>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d105      	bne.n	8000862 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <I2C_PeriClockControl+0x60>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <I2C_PeriClockControl+0x60>)
 800085c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40005400 	.word	0x40005400
 8000870:	40023800 	.word	0x40023800
 8000874:	40005800 	.word	0x40005800
 8000878:	40005c00 	.word	0x40005c00

0800087c <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffbe 	bl	8000810 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7a5b      	ldrb	r3, [r3, #9]
 8000898:	029b      	lsls	r3, r3, #10
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4313      	orrs	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 80008ae:	f000 fbdf 	bl	8001070 <RCC_GetPCLK1Value>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <I2C_Init+0x158>)
 80008b6:	fba3 2302 	umull	r2, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008cc:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7a1b      	ldrb	r3, [r3, #8]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	461a      	mov	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <I2C_Init+0x15c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d80f      	bhi.n	8000922 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000902:	f000 fbb5 	bl	8001070 <RCC_GetPCLK1Value>
 8000906:	4602      	mov	r2, r0
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000914:	897b      	ldrh	r3, [r7, #10]
 8000916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e02d      	b.n	800097e <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000928:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7a9b      	ldrb	r3, [r3, #10]
 800092e:	039b      	lsls	r3, r3, #14
 8000930:	461a      	mov	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4313      	orrs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a9b      	ldrb	r3, [r3, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10b      	bne.n	8000958 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000940:	f000 fb96 	bl	8001070 <RCC_GetPCLK1Value>
 8000944:	4601      	mov	r1, r0
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	fbb1 f3f3 	udiv	r3, r1, r3
 8000954:	817b      	strh	r3, [r7, #10]
 8000956:	e00c      	b.n	8000972 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000958:	f000 fb8a 	bl	8001070 <RCC_GetPCLK1Value>
 800095c:	4601      	mov	r1, r0
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	009a      	lsls	r2, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000970:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000972:	897b      	ldrh	r3, [r7, #10]
 8000974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <I2C_Init+0x15c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d809      	bhi.n	80009a4 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000990:	f000 fb6e 	bl	8001070 <RCC_GetPCLK1Value>
 8000994:	4602      	mov	r2, r0
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <I2C_Init+0x158>)
 8000998:	fba3 2302 	umull	r2, r3, r3, r2
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e00d      	b.n	80009c0 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80009a4:	f000 fb64 	bl	8001070 <RCC_GetPCLK1Value>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009ae:	fb03 f302 	mul.w	r3, r3, r2
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <I2C_Init+0x160>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	09db      	lsrs	r3, r3, #7
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ca:	621a      	str	r2, [r3, #32]

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	000186a0 	.word	0x000186a0
 80009dc:	00044b83 	.word	0x00044b83

080009e0 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80009fe:	e005      	b.n	8000a0c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d133      	bne.n	8000a96 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	d80a      	bhi.n	8000a4a <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <I2C_IRQInterruptConfig+0xf0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <I2C_IRQInterruptConfig+0xf0>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000a48:	e059      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b1f      	cmp	r3, #31
 8000a4e:	d90f      	bls.n	8000a70 <I2C_IRQInterruptConfig+0x58>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b3f      	cmp	r3, #63	; 0x3f
 8000a54:	d80c      	bhi.n	8000a70 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <I2C_IRQInterruptConfig+0xf4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	f002 021f 	and.w	r2, r2, #31
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <I2C_IRQInterruptConfig+0xf4>)
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e046      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b3f      	cmp	r3, #63	; 0x3f
 8000a74:	d943      	bls.n	8000afe <I2C_IRQInterruptConfig+0xe6>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b5f      	cmp	r3, #95	; 0x5f
 8000a7a:	d840      	bhi.n	8000afe <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <I2C_IRQInterruptConfig+0xf8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <I2C_IRQInterruptConfig+0xf8>)
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	e033      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b1f      	cmp	r3, #31
 8000a9a:	d80a      	bhi.n	8000ab2 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <I2C_IRQInterruptConfig+0xfc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <I2C_IRQInterruptConfig+0xfc>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	e025      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	d90f      	bls.n	8000ad8 <I2C_IRQInterruptConfig+0xc0>
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b3f      	cmp	r3, #63	; 0x3f
 8000abc:	d80c      	bhi.n	8000ad8 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <I2C_IRQInterruptConfig+0x100>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	f002 021f 	and.w	r2, r2, #31
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <I2C_IRQInterruptConfig+0x100>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e012      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b05      	cmp	r3, #5
 8000adc:	d90f      	bls.n	8000afe <I2C_IRQInterruptConfig+0xe6>
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ae2:	d80c      	bhi.n	8000afe <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <I2C_IRQInterruptConfig+0x104>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	79fa      	ldrb	r2, [r7, #7]
 8000aea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000aee:	2101      	movs	r1, #1
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	4611      	mov	r1, r2
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <I2C_IRQInterruptConfig+0x104>)
 8000af8:	430b      	orrs	r3, r1
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	e7ff      	b.n	8000afe <I2C_IRQInterruptConfig+0xe6>
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000e104 	.word	0xe000e104
 8000b10:	e000e10c 	.word	0xe000e10c
 8000b14:	e000e180 	.word	0xe000e180
 8000b18:	e000e184 	.word	0xe000e184
 8000b1c:	e000e18c 	.word	0xe000e18c

08000b20 <I2C_MasterSendDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	7f1b      	ldrb	r3, [r3, #28]
 8000b32:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d030      	beq.n	8000b9c <I2C_MasterSendDataIT+0x7c>
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d02d      	beq.n	8000b9c <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2202      	movs	r2, #2
 8000b50:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	78fa      	ldrb	r2, [r7, #3]
 8000b56:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fdb7 	bl	80006da <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b7a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b9a:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <I2C_MasterReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	7f1b      	ldrb	r3, [r3, #28]
 8000bc0:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d033      	beq.n	8000c30 <I2C_MasterReceiveDataIT+0x8a>
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d030      	beq.n	8000c30 <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len;
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	79ba      	ldrb	r2, [r7, #6]
 8000bea:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd6d 	bl	80006da <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c0e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c1e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c2e:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00f      	beq.n	8000c6a <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60da      	str	r2, [r3, #12]

	}

}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d91a      	bls.n	8000cda <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d105      	bne.n	8000cb8 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe94 	bl	80009e0 <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d110      	bne.n	8000d04 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d104      	bne.n	8000cf6 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fd62 	bl	80007ba <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f808 	bl	8000d0c <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 fb2a 	bl	8001358 <I2C_ApplicationEventCallback>
	}
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d22:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d32:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7a5b      	ldrb	r3, [r3, #9]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe40 	bl	80009e0 <I2C_ManageAcking>
	}

}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d7e:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d8e:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <I2C_EV_IRQHandling>:
}



void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dbe:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	613b      	str	r3, [r7, #16]

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d01b      	beq.n	8000e16 <I2C_EV_IRQHandling+0x6a>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d018      	beq.n	8000e16 <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f1b      	ldrb	r3, [r3, #28]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d108      	bne.n	8000dfe <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7f5b      	ldrb	r3, [r3, #29]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f7ff fc7e 	bl	80006f8 <I2C_ExecuteAddressPhaseWrite>
 8000dfc:	e00b      	b.n	8000e16 <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7f1b      	ldrb	r3, [r3, #28]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d107      	bne.n	8000e16 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7f5b      	ldrb	r3, [r3, #29]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4610      	mov	r0, r2
 8000e12:	f7ff fc86 	bl	8000722 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <I2C_EV_IRQHandling+0x88>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fc8c 	bl	800074c <I2C_ClearADDRFlag>
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d022      	beq.n	8000e8c <I2C_EV_IRQHandling+0xe0>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01f      	beq.n	8000e8c <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7f1b      	ldrb	r3, [r3, #28]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d11b      	bne.n	8000e8c <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d014      	beq.n	8000e8c <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0 )
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d110      	bne.n	8000e8c <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d104      	bne.n	8000e7e <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc9e 	bl	80007ba <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff72 	bl	8000d68 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fa66 	bl	8001358 <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00c      	beq.n	8000eb8 <I2C_EV_IRQHandling+0x10c>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <I2C_EV_IRQHandling+0x10c>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fa50 	bl	8001358 <I2C_ApplicationEventCallback>
	}


	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01f      	beq.n	8000f0a <I2C_EV_IRQHandling+0x15e>
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01c      	beq.n	8000f0a <I2C_EV_IRQHandling+0x15e>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7f1b      	ldrb	r3, [r3, #28]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d10e      	bne.n	8000f0a <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fea4 	bl	8000c3a <I2C_MasterHandleTXEInterrupt>
 8000ef2:	e00a      	b.n	8000f0a <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000f02:	2108      	movs	r1, #8
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fa27 	bl	8001358 <I2C_ApplicationEventCallback>
		    }
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f14:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01f      	beq.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01c      	beq.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d019      	beq.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7f1b      	ldrb	r3, [r3, #28]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10e      	bne.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fe98 	bl	8000c74 <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f44:	e00a      	b.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000f54:	2109      	movs	r1, #9
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f9fe 	bl	8001358 <I2C_ApplicationEventCallback>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00e      	beq.n	8000fa8 <I2C_ER_IRQHandling+0x44>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f9e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f9d8 	bl	8001358 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb2:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00e      	beq.n	8000fd8 <I2C_ER_IRQHandling+0x74>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fce:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f9c0 	bl	8001358 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00e      	beq.n	8001008 <I2C_ER_IRQHandling+0xa4>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ffe:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001000:	2105      	movs	r1, #5
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f9a8 	bl	8001358 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001012:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00e      	beq.n	8001038 <I2C_ER_IRQHandling+0xd4>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800102e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001030:	2106      	movs	r1, #6
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f990 	bl	8001358 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00e      	beq.n	8001068 <I2C_ER_IRQHandling+0x104>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800105e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8001060:	2107      	movs	r1, #7
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f978 	bl	8001358 <I2C_ApplicationEventCallback>
	}

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <RCC_GetPCLK1Value+0x9c>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <RCC_GetPCLK1Value+0xa0>)
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e00b      	b.n	80010a8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001090:	7a7b      	ldrb	r3, [r7, #9]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <RCC_GetPCLK1Value+0xa4>)
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e005      	b.n	80010a8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 800109c:	7a7b      	ldrb	r3, [r7, #9]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d102      	bne.n	80010a8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80010a2:	f000 f83d 	bl	8001120 <RCC_GetPLLOutputClock>
 80010a6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <RCC_GetPCLK1Value+0x9c>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d802      	bhi.n	80010c2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	72fb      	strb	r3, [r7, #11]
 80010c0:	e005      	b.n	80010ce <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80010c2:	7a3b      	ldrb	r3, [r7, #8]
 80010c4:	3b08      	subs	r3, #8
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <RCC_GetPCLK1Value+0xa8>)
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010cc:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <RCC_GetPCLK1Value+0x9c>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	0a9b      	lsrs	r3, r3, #10
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80010dc:	7a3b      	ldrb	r3, [r7, #8]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d802      	bhi.n	80010e8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	72bb      	strb	r3, [r7, #10]
 80010e6:	e004      	b.n	80010f2 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	3b04      	subs	r3, #4
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <RCC_GetPCLK1Value+0xac>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	00f42400 	.word	0x00f42400
 8001114:	007a1200 	.word	0x007a1200
 8001118:	20000000 	.word	0x20000000
 800111c:	20000010 	.word	0x20000010

08001120 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
	...

08001130 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e002      	b.n	8001142 <delay+0x12>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <delay+0x24>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d9f8      	bls.n	800113c <delay+0xc>
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	0003d08f 	.word	0x0003d08f

08001158 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <I2C1_GPIOInits+0x40>)
 8001160:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001162:	2302      	movs	r3, #2
 8001164:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001166:	2301      	movs	r3, #1
 8001168:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800116a:	2301      	movs	r3, #1
 800116c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001172:	2302      	movs	r3, #2
 8001174:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001176:	2306      	movs	r3, #6
 8001178:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f8fb 	bl	8000378 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001182:	2307      	movs	r3, #7
 8001184:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f8f5 	bl	8000378 <GPIO_Init>


}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020400 	.word	0x40020400

0800119c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <I2C1_Inits+0x2c>)
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <I2C1_Inits+0x30>)
 80011a4:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <I2C1_Inits+0x2c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <I2C1_Inits+0x2c>)
 80011ae:	2261      	movs	r2, #97	; 0x61
 80011b0:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <I2C1_Inits+0x2c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <I2C1_Inits+0x2c>)
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <I2C1_Inits+0x34>)
 80011bc:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <I2C1_Inits+0x2c>)
 80011c0:	f7ff fb5c 	bl	800087c <I2C_Init>

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000a4 	.word	0x200000a4
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <GPIO_ButtonInit+0x54>)
 80011dc:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80011de:	2300      	movs	r3, #0
 80011e0:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80011e2:	2300      	movs	r3, #0
 80011e4:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80011e6:	2302      	movs	r3, #2
 80011e8:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011ea:	2300      	movs	r3, #0
 80011ec:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f8c0 	bl	8000378 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <GPIO_ButtonInit+0x58>)
 80011fa:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80011fc:	230c      	movs	r3, #12
 80011fe:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001200:	2301      	movs	r3, #1
 8001202:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001204:	2302      	movs	r3, #2
 8001206:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001208:	2301      	movs	r3, #1
 800120a:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8001210:	2101      	movs	r1, #1
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <GPIO_ButtonInit+0x58>)
 8001214:	f7ff f82c 	bl	8000270 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8001218:	463b      	mov	r3, r7
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8ac 	bl	8000378 <GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020000 	.word	0x40020000
 800122c:	40020c00 	.word	0x40020c00

08001230 <main>:


int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af02      	add	r7, sp, #8

	uint8_t commandcode;

	uint8_t len;

	initialise_monitor_handles();
 8001236:	f000 f8c1 	bl	80013bc <initialise_monitor_handles>

	printf("Application is running\n");
 800123a:	4836      	ldr	r0, [pc, #216]	; (8001314 <main+0xe4>)
 800123c:	f000 fa34 	bl	80016a8 <puts>

	GPIO_ButtonInit();
 8001240:	f7ff ffc8 	bl	80011d4 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8001244:	f7ff ff88 	bl	8001158 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8001248:	f7ff ffa8 	bl	800119c <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 800124c:	2101      	movs	r1, #1
 800124e:	201f      	movs	r0, #31
 8001250:	f7ff fbe2 	bl	8000a18 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 8001254:	2101      	movs	r1, #1
 8001256:	2020      	movs	r0, #32
 8001258:	f7ff fbde 	bl	8000a18 <I2C_IRQInterruptConfig>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 800125c:	2101      	movs	r1, #1
 800125e:	482e      	ldr	r0, [pc, #184]	; (8001318 <main+0xe8>)
 8001260:	f7ff faba 	bl	80007d8 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8001264:	2101      	movs	r1, #1
 8001266:	482c      	ldr	r0, [pc, #176]	; (8001318 <main+0xe8>)
 8001268:	f7ff fbba 	bl	80009e0 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800126c:	bf00      	nop
 800126e:	2100      	movs	r1, #0
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <main+0xec>)
 8001272:	f7ff fa1d 	bl	80006b0 <GPIO_ReadFromInputPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f8      	beq.n	800126e <main+0x3e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800127c:	f7ff ff58 	bl	8001130 <delay>

		commandcode = 0x51;
 8001280:	2351      	movs	r3, #81	; 0x51
 8001282:	71fb      	strb	r3, [r7, #7]


		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 8001284:	bf00      	nop
 8001286:	1df9      	adds	r1, r7, #7
 8001288:	2301      	movs	r3, #1
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2368      	movs	r3, #104	; 0x68
 800128e:	2201      	movs	r2, #1
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <main+0xf0>)
 8001292:	f7ff fc45 	bl	8000b20 <I2C_MasterSendDataIT>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f4      	bne.n	8001286 <main+0x56>

		while(I2C_MasterReceiveDataIT(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR)!= I2C_READY);
 800129c:	bf00      	nop
 800129e:	1db9      	adds	r1, r7, #6
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2368      	movs	r3, #104	; 0x68
 80012a6:	2201      	movs	r2, #1
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <main+0xf0>)
 80012aa:	f7ff fc7c 	bl	8000ba6 <I2C_MasterReceiveDataIT>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f4      	bne.n	800129e <main+0x6e>



		commandcode = 0x52;
 80012b4:	2352      	movs	r3, #82	; 0x52
 80012b6:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80012b8:	bf00      	nop
 80012ba:	1df9      	adds	r1, r7, #7
 80012bc:	2301      	movs	r3, #1
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2368      	movs	r3, #104	; 0x68
 80012c2:	2201      	movs	r2, #1
 80012c4:	4816      	ldr	r0, [pc, #88]	; (8001320 <main+0xf0>)
 80012c6:	f7ff fc2b 	bl	8000b20 <I2C_MasterSendDataIT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f4      	bne.n	80012ba <main+0x8a>


		while(I2C_MasterReceiveDataIT(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR)!= I2C_READY);
 80012d0:	bf00      	nop
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2368      	movs	r3, #104	; 0x68
 80012da:	4912      	ldr	r1, [pc, #72]	; (8001324 <main+0xf4>)
 80012dc:	4810      	ldr	r0, [pc, #64]	; (8001320 <main+0xf0>)
 80012de:	f7ff fc62 	bl	8000ba6 <I2C_MasterReceiveDataIT>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f4      	bne.n	80012d2 <main+0xa2>

		rxComplt = RESET;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <main+0xf8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]

		//wait till rx completes
        while(rxComplt != SET)
 80012ee:	bf00      	nop
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <main+0xf8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d1fb      	bne.n	80012f0 <main+0xc0>
        {

        }

		rcv_buf[len+1] = '\0';
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <main+0xf4>)
 80012fe:	2100      	movs	r1, #0
 8001300:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <main+0xf4>)
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <main+0xfc>)
 8001306:	f000 f95b 	bl	80015c0 <iprintf>

		rxComplt = RESET;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0xf8>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8001310:	e7ac      	b.n	800126c <main+0x3c>
 8001312:	bf00      	nop
 8001314:	08002464 	.word	0x08002464
 8001318:	40005400 	.word	0x40005400
 800131c:	40020000 	.word	0x40020000
 8001320:	200000a4 	.word	0x200000a4
 8001324:	200000cc 	.word	0x200000cc
 8001328:	20000094 	.word	0x20000094
 800132c:	0800247c 	.word	0x0800247c

08001330 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <I2C1_EV_IRQHandler+0x10>)
 8001336:	f7ff fd39 	bl	8000dac <I2C_EV_IRQHandling>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000a4 	.word	0x200000a4

08001344 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <I2C1_ER_IRQHandler+0x10>)
 800134a:	f7ff fe0b 	bl	8000f64 <I2C_ER_IRQHandling>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000a4 	.word	0x200000a4

08001358 <I2C_ApplicationEventCallback>:



void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
     if(AppEv == I2C_EV_TX_CMPLT)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <I2C_ApplicationEventCallback+0x1a>
     {
    	 printf("Tx is completed\n");
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <I2C_ApplicationEventCallback+0x50>)
 800136c:	f000 f99c 	bl	80016a8 <puts>
    	 I2C_GenerateStopCondition(I2C1);

    	 //Hang in infinite loop
    	 while(1);
     }
}
 8001370:	e016      	b.n	80013a0 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_EV_RX_CMPLT)
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <I2C_ApplicationEventCallback+0x2e>
    	 printf("Rx is completed\n");
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <I2C_ApplicationEventCallback+0x54>)
 800137a:	f000 f995 	bl	80016a8 <puts>
    	 rxComplt = SET;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <I2C_ApplicationEventCallback+0x58>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	e00c      	b.n	80013a0 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_ERROR_AF)
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d109      	bne.n	80013a0 <I2C_ApplicationEventCallback+0x48>
    	 printf("Error : Ack failure\n");
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <I2C_ApplicationEventCallback+0x5c>)
 800138e:	f000 f98b 	bl	80016a8 <puts>
    	 I2C_CloseSendData(pI2CHandle);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fce8 	bl	8000d68 <I2C_CloseSendData>
    	 I2C_GenerateStopCondition(I2C1);
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <I2C_ApplicationEventCallback+0x60>)
 800139a:	f7ff fa0e 	bl	80007ba <I2C_GenerateStopCondition>
    	 while(1);
 800139e:	e7fe      	b.n	800139e <I2C_ApplicationEventCallback+0x46>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08002488 	.word	0x08002488
 80013ac:	08002498 	.word	0x08002498
 80013b0:	20000094 	.word	0x20000094
 80013b4:	080024a8 	.word	0x080024a8
 80013b8:	40005400 	.word	0x40005400

080013bc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
	}

return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
	}
	return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001460:	605a      	str	r2, [r3, #4]
	return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f000 f846 	bl	800155c <__errno>
 80014d0:	4602      	mov	r2, r0
 80014d2:	230c      	movs	r3, #12
 80014d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20018000 	.word	0x20018000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000098 	.word	0x20000098
 8001504:	200000f0 	.word	0x200000f0

08001508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800150c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001536:	f000 f817 	bl	8001568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fe79 	bl	8001230 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800154c:	0800255c 	.word	0x0800255c
  ldr r2, =_sbss
 8001550:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001554:	200000f0 	.word	0x200000f0

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <__errno>:
 800155c:	4b01      	ldr	r3, [pc, #4]	; (8001564 <__errno+0x8>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000014 	.word	0x20000014

08001568 <__libc_init_array>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	4e0d      	ldr	r6, [pc, #52]	; (80015a0 <__libc_init_array+0x38>)
 800156c:	4c0d      	ldr	r4, [pc, #52]	; (80015a4 <__libc_init_array+0x3c>)
 800156e:	1ba4      	subs	r4, r4, r6
 8001570:	10a4      	asrs	r4, r4, #2
 8001572:	2500      	movs	r5, #0
 8001574:	42a5      	cmp	r5, r4
 8001576:	d109      	bne.n	800158c <__libc_init_array+0x24>
 8001578:	4e0b      	ldr	r6, [pc, #44]	; (80015a8 <__libc_init_array+0x40>)
 800157a:	4c0c      	ldr	r4, [pc, #48]	; (80015ac <__libc_init_array+0x44>)
 800157c:	f000 ff66 	bl	800244c <_init>
 8001580:	1ba4      	subs	r4, r4, r6
 8001582:	10a4      	asrs	r4, r4, #2
 8001584:	2500      	movs	r5, #0
 8001586:	42a5      	cmp	r5, r4
 8001588:	d105      	bne.n	8001596 <__libc_init_array+0x2e>
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001590:	4798      	blx	r3
 8001592:	3501      	adds	r5, #1
 8001594:	e7ee      	b.n	8001574 <__libc_init_array+0xc>
 8001596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800159a:	4798      	blx	r3
 800159c:	3501      	adds	r5, #1
 800159e:	e7f2      	b.n	8001586 <__libc_init_array+0x1e>
 80015a0:	08002554 	.word	0x08002554
 80015a4:	08002554 	.word	0x08002554
 80015a8:	08002554 	.word	0x08002554
 80015ac:	08002558 	.word	0x08002558

080015b0 <memset>:
 80015b0:	4402      	add	r2, r0
 80015b2:	4603      	mov	r3, r0
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d100      	bne.n	80015ba <memset+0xa>
 80015b8:	4770      	bx	lr
 80015ba:	f803 1b01 	strb.w	r1, [r3], #1
 80015be:	e7f9      	b.n	80015b4 <memset+0x4>

080015c0 <iprintf>:
 80015c0:	b40f      	push	{r0, r1, r2, r3}
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <iprintf+0x2c>)
 80015c4:	b513      	push	{r0, r1, r4, lr}
 80015c6:	681c      	ldr	r4, [r3, #0]
 80015c8:	b124      	cbz	r4, 80015d4 <iprintf+0x14>
 80015ca:	69a3      	ldr	r3, [r4, #24]
 80015cc:	b913      	cbnz	r3, 80015d4 <iprintf+0x14>
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 fa22 	bl	8001a18 <__sinit>
 80015d4:	ab05      	add	r3, sp, #20
 80015d6:	9a04      	ldr	r2, [sp, #16]
 80015d8:	68a1      	ldr	r1, [r4, #8]
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	4620      	mov	r0, r4
 80015de:	f000 fbd9 	bl	8001d94 <_vfiprintf_r>
 80015e2:	b002      	add	sp, #8
 80015e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015e8:	b004      	add	sp, #16
 80015ea:	4770      	bx	lr
 80015ec:	20000014 	.word	0x20000014

080015f0 <_puts_r>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	460e      	mov	r6, r1
 80015f4:	4605      	mov	r5, r0
 80015f6:	b118      	cbz	r0, 8001600 <_puts_r+0x10>
 80015f8:	6983      	ldr	r3, [r0, #24]
 80015fa:	b90b      	cbnz	r3, 8001600 <_puts_r+0x10>
 80015fc:	f000 fa0c 	bl	8001a18 <__sinit>
 8001600:	69ab      	ldr	r3, [r5, #24]
 8001602:	68ac      	ldr	r4, [r5, #8]
 8001604:	b913      	cbnz	r3, 800160c <_puts_r+0x1c>
 8001606:	4628      	mov	r0, r5
 8001608:	f000 fa06 	bl	8001a18 <__sinit>
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <_puts_r+0xac>)
 800160e:	429c      	cmp	r4, r3
 8001610:	d117      	bne.n	8001642 <_puts_r+0x52>
 8001612:	686c      	ldr	r4, [r5, #4]
 8001614:	89a3      	ldrh	r3, [r4, #12]
 8001616:	071b      	lsls	r3, r3, #28
 8001618:	d51d      	bpl.n	8001656 <_puts_r+0x66>
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	b1db      	cbz	r3, 8001656 <_puts_r+0x66>
 800161e:	3e01      	subs	r6, #1
 8001620:	68a3      	ldr	r3, [r4, #8]
 8001622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001626:	3b01      	subs	r3, #1
 8001628:	60a3      	str	r3, [r4, #8]
 800162a:	b9e9      	cbnz	r1, 8001668 <_puts_r+0x78>
 800162c:	2b00      	cmp	r3, #0
 800162e:	da2e      	bge.n	800168e <_puts_r+0x9e>
 8001630:	4622      	mov	r2, r4
 8001632:	210a      	movs	r1, #10
 8001634:	4628      	mov	r0, r5
 8001636:	f000 f83f 	bl	80016b8 <__swbuf_r>
 800163a:	3001      	adds	r0, #1
 800163c:	d011      	beq.n	8001662 <_puts_r+0x72>
 800163e:	200a      	movs	r0, #10
 8001640:	e011      	b.n	8001666 <_puts_r+0x76>
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <_puts_r+0xb0>)
 8001644:	429c      	cmp	r4, r3
 8001646:	d101      	bne.n	800164c <_puts_r+0x5c>
 8001648:	68ac      	ldr	r4, [r5, #8]
 800164a:	e7e3      	b.n	8001614 <_puts_r+0x24>
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_puts_r+0xb4>)
 800164e:	429c      	cmp	r4, r3
 8001650:	bf08      	it	eq
 8001652:	68ec      	ldreq	r4, [r5, #12]
 8001654:	e7de      	b.n	8001614 <_puts_r+0x24>
 8001656:	4621      	mov	r1, r4
 8001658:	4628      	mov	r0, r5
 800165a:	f000 f87f 	bl	800175c <__swsetup_r>
 800165e:	2800      	cmp	r0, #0
 8001660:	d0dd      	beq.n	800161e <_puts_r+0x2e>
 8001662:	f04f 30ff 	mov.w	r0, #4294967295
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	2b00      	cmp	r3, #0
 800166a:	da04      	bge.n	8001676 <_puts_r+0x86>
 800166c:	69a2      	ldr	r2, [r4, #24]
 800166e:	429a      	cmp	r2, r3
 8001670:	dc06      	bgt.n	8001680 <_puts_r+0x90>
 8001672:	290a      	cmp	r1, #10
 8001674:	d004      	beq.n	8001680 <_puts_r+0x90>
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	6022      	str	r2, [r4, #0]
 800167c:	7019      	strb	r1, [r3, #0]
 800167e:	e7cf      	b.n	8001620 <_puts_r+0x30>
 8001680:	4622      	mov	r2, r4
 8001682:	4628      	mov	r0, r5
 8001684:	f000 f818 	bl	80016b8 <__swbuf_r>
 8001688:	3001      	adds	r0, #1
 800168a:	d1c9      	bne.n	8001620 <_puts_r+0x30>
 800168c:	e7e9      	b.n	8001662 <_puts_r+0x72>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	200a      	movs	r0, #10
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	6022      	str	r2, [r4, #0]
 8001696:	7018      	strb	r0, [r3, #0]
 8001698:	e7e5      	b.n	8001666 <_puts_r+0x76>
 800169a:	bf00      	nop
 800169c:	080024e0 	.word	0x080024e0
 80016a0:	08002500 	.word	0x08002500
 80016a4:	080024c0 	.word	0x080024c0

080016a8 <puts>:
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <puts+0xc>)
 80016aa:	4601      	mov	r1, r0
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	f7ff bf9f 	b.w	80015f0 <_puts_r>
 80016b2:	bf00      	nop
 80016b4:	20000014 	.word	0x20000014

080016b8 <__swbuf_r>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	460e      	mov	r6, r1
 80016bc:	4614      	mov	r4, r2
 80016be:	4605      	mov	r5, r0
 80016c0:	b118      	cbz	r0, 80016ca <__swbuf_r+0x12>
 80016c2:	6983      	ldr	r3, [r0, #24]
 80016c4:	b90b      	cbnz	r3, 80016ca <__swbuf_r+0x12>
 80016c6:	f000 f9a7 	bl	8001a18 <__sinit>
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <__swbuf_r+0x98>)
 80016cc:	429c      	cmp	r4, r3
 80016ce:	d12a      	bne.n	8001726 <__swbuf_r+0x6e>
 80016d0:	686c      	ldr	r4, [r5, #4]
 80016d2:	69a3      	ldr	r3, [r4, #24]
 80016d4:	60a3      	str	r3, [r4, #8]
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	071a      	lsls	r2, r3, #28
 80016da:	d52e      	bpl.n	800173a <__swbuf_r+0x82>
 80016dc:	6923      	ldr	r3, [r4, #16]
 80016de:	b363      	cbz	r3, 800173a <__swbuf_r+0x82>
 80016e0:	6923      	ldr	r3, [r4, #16]
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	1ac0      	subs	r0, r0, r3
 80016e6:	6963      	ldr	r3, [r4, #20]
 80016e8:	b2f6      	uxtb	r6, r6
 80016ea:	4283      	cmp	r3, r0
 80016ec:	4637      	mov	r7, r6
 80016ee:	dc04      	bgt.n	80016fa <__swbuf_r+0x42>
 80016f0:	4621      	mov	r1, r4
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 f926 	bl	8001944 <_fflush_r>
 80016f8:	bb28      	cbnz	r0, 8001746 <__swbuf_r+0x8e>
 80016fa:	68a3      	ldr	r3, [r4, #8]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60a3      	str	r3, [r4, #8]
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	6022      	str	r2, [r4, #0]
 8001706:	701e      	strb	r6, [r3, #0]
 8001708:	6963      	ldr	r3, [r4, #20]
 800170a:	3001      	adds	r0, #1
 800170c:	4283      	cmp	r3, r0
 800170e:	d004      	beq.n	800171a <__swbuf_r+0x62>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	07db      	lsls	r3, r3, #31
 8001714:	d519      	bpl.n	800174a <__swbuf_r+0x92>
 8001716:	2e0a      	cmp	r6, #10
 8001718:	d117      	bne.n	800174a <__swbuf_r+0x92>
 800171a:	4621      	mov	r1, r4
 800171c:	4628      	mov	r0, r5
 800171e:	f000 f911 	bl	8001944 <_fflush_r>
 8001722:	b190      	cbz	r0, 800174a <__swbuf_r+0x92>
 8001724:	e00f      	b.n	8001746 <__swbuf_r+0x8e>
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <__swbuf_r+0x9c>)
 8001728:	429c      	cmp	r4, r3
 800172a:	d101      	bne.n	8001730 <__swbuf_r+0x78>
 800172c:	68ac      	ldr	r4, [r5, #8]
 800172e:	e7d0      	b.n	80016d2 <__swbuf_r+0x1a>
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <__swbuf_r+0xa0>)
 8001732:	429c      	cmp	r4, r3
 8001734:	bf08      	it	eq
 8001736:	68ec      	ldreq	r4, [r5, #12]
 8001738:	e7cb      	b.n	80016d2 <__swbuf_r+0x1a>
 800173a:	4621      	mov	r1, r4
 800173c:	4628      	mov	r0, r5
 800173e:	f000 f80d 	bl	800175c <__swsetup_r>
 8001742:	2800      	cmp	r0, #0
 8001744:	d0cc      	beq.n	80016e0 <__swbuf_r+0x28>
 8001746:	f04f 37ff 	mov.w	r7, #4294967295
 800174a:	4638      	mov	r0, r7
 800174c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800174e:	bf00      	nop
 8001750:	080024e0 	.word	0x080024e0
 8001754:	08002500 	.word	0x08002500
 8001758:	080024c0 	.word	0x080024c0

0800175c <__swsetup_r>:
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <__swsetup_r+0xcc>)
 800175e:	b570      	push	{r4, r5, r6, lr}
 8001760:	681d      	ldr	r5, [r3, #0]
 8001762:	4606      	mov	r6, r0
 8001764:	460c      	mov	r4, r1
 8001766:	b125      	cbz	r5, 8001772 <__swsetup_r+0x16>
 8001768:	69ab      	ldr	r3, [r5, #24]
 800176a:	b913      	cbnz	r3, 8001772 <__swsetup_r+0x16>
 800176c:	4628      	mov	r0, r5
 800176e:	f000 f953 	bl	8001a18 <__sinit>
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <__swsetup_r+0xd0>)
 8001774:	429c      	cmp	r4, r3
 8001776:	d10f      	bne.n	8001798 <__swsetup_r+0x3c>
 8001778:	686c      	ldr	r4, [r5, #4]
 800177a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177e:	b29a      	uxth	r2, r3
 8001780:	0715      	lsls	r5, r2, #28
 8001782:	d42c      	bmi.n	80017de <__swsetup_r+0x82>
 8001784:	06d0      	lsls	r0, r2, #27
 8001786:	d411      	bmi.n	80017ac <__swsetup_r+0x50>
 8001788:	2209      	movs	r2, #9
 800178a:	6032      	str	r2, [r6, #0]
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	f04f 30ff 	mov.w	r0, #4294967295
 8001796:	e03e      	b.n	8001816 <__swsetup_r+0xba>
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <__swsetup_r+0xd4>)
 800179a:	429c      	cmp	r4, r3
 800179c:	d101      	bne.n	80017a2 <__swsetup_r+0x46>
 800179e:	68ac      	ldr	r4, [r5, #8]
 80017a0:	e7eb      	b.n	800177a <__swsetup_r+0x1e>
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <__swsetup_r+0xd8>)
 80017a4:	429c      	cmp	r4, r3
 80017a6:	bf08      	it	eq
 80017a8:	68ec      	ldreq	r4, [r5, #12]
 80017aa:	e7e6      	b.n	800177a <__swsetup_r+0x1e>
 80017ac:	0751      	lsls	r1, r2, #29
 80017ae:	d512      	bpl.n	80017d6 <__swsetup_r+0x7a>
 80017b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017b2:	b141      	cbz	r1, 80017c6 <__swsetup_r+0x6a>
 80017b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017b8:	4299      	cmp	r1, r3
 80017ba:	d002      	beq.n	80017c2 <__swsetup_r+0x66>
 80017bc:	4630      	mov	r0, r6
 80017be:	f000 fa19 	bl	8001bf4 <_free_r>
 80017c2:	2300      	movs	r3, #0
 80017c4:	6363      	str	r3, [r4, #52]	; 0x34
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017cc:	81a3      	strh	r3, [r4, #12]
 80017ce:	2300      	movs	r3, #0
 80017d0:	6063      	str	r3, [r4, #4]
 80017d2:	6923      	ldr	r3, [r4, #16]
 80017d4:	6023      	str	r3, [r4, #0]
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	81a3      	strh	r3, [r4, #12]
 80017de:	6923      	ldr	r3, [r4, #16]
 80017e0:	b94b      	cbnz	r3, 80017f6 <__swsetup_r+0x9a>
 80017e2:	89a3      	ldrh	r3, [r4, #12]
 80017e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ec:	d003      	beq.n	80017f6 <__swsetup_r+0x9a>
 80017ee:	4621      	mov	r1, r4
 80017f0:	4630      	mov	r0, r6
 80017f2:	f000 f9bf 	bl	8001b74 <__smakebuf_r>
 80017f6:	89a2      	ldrh	r2, [r4, #12]
 80017f8:	f012 0301 	ands.w	r3, r2, #1
 80017fc:	d00c      	beq.n	8001818 <__swsetup_r+0xbc>
 80017fe:	2300      	movs	r3, #0
 8001800:	60a3      	str	r3, [r4, #8]
 8001802:	6963      	ldr	r3, [r4, #20]
 8001804:	425b      	negs	r3, r3
 8001806:	61a3      	str	r3, [r4, #24]
 8001808:	6923      	ldr	r3, [r4, #16]
 800180a:	b953      	cbnz	r3, 8001822 <__swsetup_r+0xc6>
 800180c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001814:	d1ba      	bne.n	800178c <__swsetup_r+0x30>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	0792      	lsls	r2, r2, #30
 800181a:	bf58      	it	pl
 800181c:	6963      	ldrpl	r3, [r4, #20]
 800181e:	60a3      	str	r3, [r4, #8]
 8001820:	e7f2      	b.n	8001808 <__swsetup_r+0xac>
 8001822:	2000      	movs	r0, #0
 8001824:	e7f7      	b.n	8001816 <__swsetup_r+0xba>
 8001826:	bf00      	nop
 8001828:	20000014 	.word	0x20000014
 800182c:	080024e0 	.word	0x080024e0
 8001830:	08002500 	.word	0x08002500
 8001834:	080024c0 	.word	0x080024c0

08001838 <__sflush_r>:
 8001838:	898a      	ldrh	r2, [r1, #12]
 800183a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800183e:	4605      	mov	r5, r0
 8001840:	0710      	lsls	r0, r2, #28
 8001842:	460c      	mov	r4, r1
 8001844:	d458      	bmi.n	80018f8 <__sflush_r+0xc0>
 8001846:	684b      	ldr	r3, [r1, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc05      	bgt.n	8001858 <__sflush_r+0x20>
 800184c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	dc02      	bgt.n	8001858 <__sflush_r+0x20>
 8001852:	2000      	movs	r0, #0
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800185a:	2e00      	cmp	r6, #0
 800185c:	d0f9      	beq.n	8001852 <__sflush_r+0x1a>
 800185e:	2300      	movs	r3, #0
 8001860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001864:	682f      	ldr	r7, [r5, #0]
 8001866:	6a21      	ldr	r1, [r4, #32]
 8001868:	602b      	str	r3, [r5, #0]
 800186a:	d032      	beq.n	80018d2 <__sflush_r+0x9a>
 800186c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800186e:	89a3      	ldrh	r3, [r4, #12]
 8001870:	075a      	lsls	r2, r3, #29
 8001872:	d505      	bpl.n	8001880 <__sflush_r+0x48>
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	1ac0      	subs	r0, r0, r3
 8001878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800187a:	b10b      	cbz	r3, 8001880 <__sflush_r+0x48>
 800187c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187e:	1ac0      	subs	r0, r0, r3
 8001880:	2300      	movs	r3, #0
 8001882:	4602      	mov	r2, r0
 8001884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001886:	6a21      	ldr	r1, [r4, #32]
 8001888:	4628      	mov	r0, r5
 800188a:	47b0      	blx	r6
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	89a3      	ldrh	r3, [r4, #12]
 8001890:	d106      	bne.n	80018a0 <__sflush_r+0x68>
 8001892:	6829      	ldr	r1, [r5, #0]
 8001894:	291d      	cmp	r1, #29
 8001896:	d848      	bhi.n	800192a <__sflush_r+0xf2>
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <__sflush_r+0x108>)
 800189a:	40ca      	lsrs	r2, r1
 800189c:	07d6      	lsls	r6, r2, #31
 800189e:	d544      	bpl.n	800192a <__sflush_r+0xf2>
 80018a0:	2200      	movs	r2, #0
 80018a2:	6062      	str	r2, [r4, #4]
 80018a4:	04d9      	lsls	r1, r3, #19
 80018a6:	6922      	ldr	r2, [r4, #16]
 80018a8:	6022      	str	r2, [r4, #0]
 80018aa:	d504      	bpl.n	80018b6 <__sflush_r+0x7e>
 80018ac:	1c42      	adds	r2, r0, #1
 80018ae:	d101      	bne.n	80018b4 <__sflush_r+0x7c>
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	b903      	cbnz	r3, 80018b6 <__sflush_r+0x7e>
 80018b4:	6560      	str	r0, [r4, #84]	; 0x54
 80018b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018b8:	602f      	str	r7, [r5, #0]
 80018ba:	2900      	cmp	r1, #0
 80018bc:	d0c9      	beq.n	8001852 <__sflush_r+0x1a>
 80018be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018c2:	4299      	cmp	r1, r3
 80018c4:	d002      	beq.n	80018cc <__sflush_r+0x94>
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f994 	bl	8001bf4 <_free_r>
 80018cc:	2000      	movs	r0, #0
 80018ce:	6360      	str	r0, [r4, #52]	; 0x34
 80018d0:	e7c0      	b.n	8001854 <__sflush_r+0x1c>
 80018d2:	2301      	movs	r3, #1
 80018d4:	4628      	mov	r0, r5
 80018d6:	47b0      	blx	r6
 80018d8:	1c41      	adds	r1, r0, #1
 80018da:	d1c8      	bne.n	800186e <__sflush_r+0x36>
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0c5      	beq.n	800186e <__sflush_r+0x36>
 80018e2:	2b1d      	cmp	r3, #29
 80018e4:	d001      	beq.n	80018ea <__sflush_r+0xb2>
 80018e6:	2b16      	cmp	r3, #22
 80018e8:	d101      	bne.n	80018ee <__sflush_r+0xb6>
 80018ea:	602f      	str	r7, [r5, #0]
 80018ec:	e7b1      	b.n	8001852 <__sflush_r+0x1a>
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	81a3      	strh	r3, [r4, #12]
 80018f6:	e7ad      	b.n	8001854 <__sflush_r+0x1c>
 80018f8:	690f      	ldr	r7, [r1, #16]
 80018fa:	2f00      	cmp	r7, #0
 80018fc:	d0a9      	beq.n	8001852 <__sflush_r+0x1a>
 80018fe:	0793      	lsls	r3, r2, #30
 8001900:	680e      	ldr	r6, [r1, #0]
 8001902:	bf08      	it	eq
 8001904:	694b      	ldreq	r3, [r1, #20]
 8001906:	600f      	str	r7, [r1, #0]
 8001908:	bf18      	it	ne
 800190a:	2300      	movne	r3, #0
 800190c:	eba6 0807 	sub.w	r8, r6, r7
 8001910:	608b      	str	r3, [r1, #8]
 8001912:	f1b8 0f00 	cmp.w	r8, #0
 8001916:	dd9c      	ble.n	8001852 <__sflush_r+0x1a>
 8001918:	4643      	mov	r3, r8
 800191a:	463a      	mov	r2, r7
 800191c:	6a21      	ldr	r1, [r4, #32]
 800191e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001920:	4628      	mov	r0, r5
 8001922:	47b0      	blx	r6
 8001924:	2800      	cmp	r0, #0
 8001926:	dc06      	bgt.n	8001936 <__sflush_r+0xfe>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192e:	81a3      	strh	r3, [r4, #12]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	e78e      	b.n	8001854 <__sflush_r+0x1c>
 8001936:	4407      	add	r7, r0
 8001938:	eba8 0800 	sub.w	r8, r8, r0
 800193c:	e7e9      	b.n	8001912 <__sflush_r+0xda>
 800193e:	bf00      	nop
 8001940:	20400001 	.word	0x20400001

08001944 <_fflush_r>:
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	690b      	ldr	r3, [r1, #16]
 8001948:	4605      	mov	r5, r0
 800194a:	460c      	mov	r4, r1
 800194c:	b1db      	cbz	r3, 8001986 <_fflush_r+0x42>
 800194e:	b118      	cbz	r0, 8001958 <_fflush_r+0x14>
 8001950:	6983      	ldr	r3, [r0, #24]
 8001952:	b90b      	cbnz	r3, 8001958 <_fflush_r+0x14>
 8001954:	f000 f860 	bl	8001a18 <__sinit>
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <_fflush_r+0x48>)
 800195a:	429c      	cmp	r4, r3
 800195c:	d109      	bne.n	8001972 <_fflush_r+0x2e>
 800195e:	686c      	ldr	r4, [r5, #4]
 8001960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001964:	b17b      	cbz	r3, 8001986 <_fflush_r+0x42>
 8001966:	4621      	mov	r1, r4
 8001968:	4628      	mov	r0, r5
 800196a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800196e:	f7ff bf63 	b.w	8001838 <__sflush_r>
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <_fflush_r+0x4c>)
 8001974:	429c      	cmp	r4, r3
 8001976:	d101      	bne.n	800197c <_fflush_r+0x38>
 8001978:	68ac      	ldr	r4, [r5, #8]
 800197a:	e7f1      	b.n	8001960 <_fflush_r+0x1c>
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <_fflush_r+0x50>)
 800197e:	429c      	cmp	r4, r3
 8001980:	bf08      	it	eq
 8001982:	68ec      	ldreq	r4, [r5, #12]
 8001984:	e7ec      	b.n	8001960 <_fflush_r+0x1c>
 8001986:	2000      	movs	r0, #0
 8001988:	bd38      	pop	{r3, r4, r5, pc}
 800198a:	bf00      	nop
 800198c:	080024e0 	.word	0x080024e0
 8001990:	08002500 	.word	0x08002500
 8001994:	080024c0 	.word	0x080024c0

08001998 <std>:
 8001998:	2300      	movs	r3, #0
 800199a:	b510      	push	{r4, lr}
 800199c:	4604      	mov	r4, r0
 800199e:	e9c0 3300 	strd	r3, r3, [r0]
 80019a2:	6083      	str	r3, [r0, #8]
 80019a4:	8181      	strh	r1, [r0, #12]
 80019a6:	6643      	str	r3, [r0, #100]	; 0x64
 80019a8:	81c2      	strh	r2, [r0, #14]
 80019aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ae:	6183      	str	r3, [r0, #24]
 80019b0:	4619      	mov	r1, r3
 80019b2:	2208      	movs	r2, #8
 80019b4:	305c      	adds	r0, #92	; 0x5c
 80019b6:	f7ff fdfb 	bl	80015b0 <memset>
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <std+0x38>)
 80019bc:	6263      	str	r3, [r4, #36]	; 0x24
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <std+0x3c>)
 80019c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <std+0x40>)
 80019c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <std+0x44>)
 80019c8:	6224      	str	r4, [r4, #32]
 80019ca:	6323      	str	r3, [r4, #48]	; 0x30
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	bf00      	nop
 80019d0:	080022f1 	.word	0x080022f1
 80019d4:	08002313 	.word	0x08002313
 80019d8:	0800234b 	.word	0x0800234b
 80019dc:	0800236f 	.word	0x0800236f

080019e0 <_cleanup_r>:
 80019e0:	4901      	ldr	r1, [pc, #4]	; (80019e8 <_cleanup_r+0x8>)
 80019e2:	f000 b885 	b.w	8001af0 <_fwalk_reent>
 80019e6:	bf00      	nop
 80019e8:	08001945 	.word	0x08001945

080019ec <__sfmoreglue>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	1e4a      	subs	r2, r1, #1
 80019f0:	2568      	movs	r5, #104	; 0x68
 80019f2:	4355      	muls	r5, r2
 80019f4:	460e      	mov	r6, r1
 80019f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80019fa:	f000 f949 	bl	8001c90 <_malloc_r>
 80019fe:	4604      	mov	r4, r0
 8001a00:	b140      	cbz	r0, 8001a14 <__sfmoreglue+0x28>
 8001a02:	2100      	movs	r1, #0
 8001a04:	e9c0 1600 	strd	r1, r6, [r0]
 8001a08:	300c      	adds	r0, #12
 8001a0a:	60a0      	str	r0, [r4, #8]
 8001a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a10:	f7ff fdce 	bl	80015b0 <memset>
 8001a14:	4620      	mov	r0, r4
 8001a16:	bd70      	pop	{r4, r5, r6, pc}

08001a18 <__sinit>:
 8001a18:	6983      	ldr	r3, [r0, #24]
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	bb33      	cbnz	r3, 8001a6e <__sinit+0x56>
 8001a20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001a24:	6503      	str	r3, [r0, #80]	; 0x50
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <__sinit+0x58>)
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <__sinit+0x5c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6282      	str	r2, [r0, #40]	; 0x28
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	bf04      	itt	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	6183      	streq	r3, [r0, #24]
 8001a36:	f000 f81f 	bl	8001a78 <__sfp>
 8001a3a:	6060      	str	r0, [r4, #4]
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f000 f81b 	bl	8001a78 <__sfp>
 8001a42:	60a0      	str	r0, [r4, #8]
 8001a44:	4620      	mov	r0, r4
 8001a46:	f000 f817 	bl	8001a78 <__sfp>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60e0      	str	r0, [r4, #12]
 8001a4e:	2104      	movs	r1, #4
 8001a50:	6860      	ldr	r0, [r4, #4]
 8001a52:	f7ff ffa1 	bl	8001998 <std>
 8001a56:	2201      	movs	r2, #1
 8001a58:	2109      	movs	r1, #9
 8001a5a:	68a0      	ldr	r0, [r4, #8]
 8001a5c:	f7ff ff9c 	bl	8001998 <std>
 8001a60:	2202      	movs	r2, #2
 8001a62:	2112      	movs	r1, #18
 8001a64:	68e0      	ldr	r0, [r4, #12]
 8001a66:	f7ff ff97 	bl	8001998 <std>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61a3      	str	r3, [r4, #24]
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	080024bc 	.word	0x080024bc
 8001a74:	080019e1 	.word	0x080019e1

08001a78 <__sfp>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <__sfp+0x70>)
 8001a7c:	681e      	ldr	r6, [r3, #0]
 8001a7e:	69b3      	ldr	r3, [r6, #24]
 8001a80:	4607      	mov	r7, r0
 8001a82:	b913      	cbnz	r3, 8001a8a <__sfp+0x12>
 8001a84:	4630      	mov	r0, r6
 8001a86:	f7ff ffc7 	bl	8001a18 <__sinit>
 8001a8a:	3648      	adds	r6, #72	; 0x48
 8001a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	d503      	bpl.n	8001a9c <__sfp+0x24>
 8001a94:	6833      	ldr	r3, [r6, #0]
 8001a96:	b133      	cbz	r3, 8001aa6 <__sfp+0x2e>
 8001a98:	6836      	ldr	r6, [r6, #0]
 8001a9a:	e7f7      	b.n	8001a8c <__sfp+0x14>
 8001a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001aa0:	b16d      	cbz	r5, 8001abe <__sfp+0x46>
 8001aa2:	3468      	adds	r4, #104	; 0x68
 8001aa4:	e7f4      	b.n	8001a90 <__sfp+0x18>
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4638      	mov	r0, r7
 8001aaa:	f7ff ff9f 	bl	80019ec <__sfmoreglue>
 8001aae:	6030      	str	r0, [r6, #0]
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d1f1      	bne.n	8001a98 <__sfp+0x20>
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4604      	mov	r4, r0
 8001aba:	4620      	mov	r0, r4
 8001abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <__sfp+0x74>)
 8001ac0:	6665      	str	r5, [r4, #100]	; 0x64
 8001ac2:	e9c4 5500 	strd	r5, r5, [r4]
 8001ac6:	60a5      	str	r5, [r4, #8]
 8001ac8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001acc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ad8:	f7ff fd6a 	bl	80015b0 <memset>
 8001adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ae4:	e7e9      	b.n	8001aba <__sfp+0x42>
 8001ae6:	bf00      	nop
 8001ae8:	080024bc 	.word	0x080024bc
 8001aec:	ffff0001 	.word	0xffff0001

08001af0 <_fwalk_reent>:
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af4:	4680      	mov	r8, r0
 8001af6:	4689      	mov	r9, r1
 8001af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001afc:	2600      	movs	r6, #0
 8001afe:	b914      	cbnz	r4, 8001b06 <_fwalk_reent+0x16>
 8001b00:	4630      	mov	r0, r6
 8001b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001b0a:	3f01      	subs	r7, #1
 8001b0c:	d501      	bpl.n	8001b12 <_fwalk_reent+0x22>
 8001b0e:	6824      	ldr	r4, [r4, #0]
 8001b10:	e7f5      	b.n	8001afe <_fwalk_reent+0xe>
 8001b12:	89ab      	ldrh	r3, [r5, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d907      	bls.n	8001b28 <_fwalk_reent+0x38>
 8001b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	d003      	beq.n	8001b28 <_fwalk_reent+0x38>
 8001b20:	4629      	mov	r1, r5
 8001b22:	4640      	mov	r0, r8
 8001b24:	47c8      	blx	r9
 8001b26:	4306      	orrs	r6, r0
 8001b28:	3568      	adds	r5, #104	; 0x68
 8001b2a:	e7ee      	b.n	8001b0a <_fwalk_reent+0x1a>

08001b2c <__swhatbuf_r>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	460e      	mov	r6, r1
 8001b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b34:	2900      	cmp	r1, #0
 8001b36:	b096      	sub	sp, #88	; 0x58
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	da07      	bge.n	8001b4e <__swhatbuf_r+0x22>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	89b3      	ldrh	r3, [r6, #12]
 8001b44:	061a      	lsls	r2, r3, #24
 8001b46:	d410      	bmi.n	8001b6a <__swhatbuf_r+0x3e>
 8001b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4c:	e00e      	b.n	8001b6c <__swhatbuf_r+0x40>
 8001b4e:	466a      	mov	r2, sp
 8001b50:	f000 fc34 	bl	80023bc <_fstat_r>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	dbf2      	blt.n	8001b3e <__swhatbuf_r+0x12>
 8001b58:	9a01      	ldr	r2, [sp, #4]
 8001b5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b62:	425a      	negs	r2, r3
 8001b64:	415a      	adcs	r2, r3
 8001b66:	602a      	str	r2, [r5, #0]
 8001b68:	e7ee      	b.n	8001b48 <__swhatbuf_r+0x1c>
 8001b6a:	2340      	movs	r3, #64	; 0x40
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	6023      	str	r3, [r4, #0]
 8001b70:	b016      	add	sp, #88	; 0x58
 8001b72:	bd70      	pop	{r4, r5, r6, pc}

08001b74 <__smakebuf_r>:
 8001b74:	898b      	ldrh	r3, [r1, #12]
 8001b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b78:	079d      	lsls	r5, r3, #30
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	d507      	bpl.n	8001b90 <__smakebuf_r+0x1c>
 8001b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	6123      	str	r3, [r4, #16]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	6163      	str	r3, [r4, #20]
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	ab01      	add	r3, sp, #4
 8001b92:	466a      	mov	r2, sp
 8001b94:	f7ff ffca 	bl	8001b2c <__swhatbuf_r>
 8001b98:	9900      	ldr	r1, [sp, #0]
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f000 f877 	bl	8001c90 <_malloc_r>
 8001ba2:	b948      	cbnz	r0, 8001bb8 <__smakebuf_r+0x44>
 8001ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ba8:	059a      	lsls	r2, r3, #22
 8001baa:	d4ef      	bmi.n	8001b8c <__smakebuf_r+0x18>
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	81a3      	strh	r3, [r4, #12]
 8001bb6:	e7e3      	b.n	8001b80 <__smakebuf_r+0xc>
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <__smakebuf_r+0x7c>)
 8001bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8001bbc:	89a3      	ldrh	r3, [r4, #12]
 8001bbe:	6020      	str	r0, [r4, #0]
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	81a3      	strh	r3, [r4, #12]
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	6163      	str	r3, [r4, #20]
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	6120      	str	r0, [r4, #16]
 8001bce:	b15b      	cbz	r3, 8001be8 <__smakebuf_r+0x74>
 8001bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f000 fc03 	bl	80023e0 <_isatty_r>
 8001bda:	b128      	cbz	r0, 8001be8 <__smakebuf_r+0x74>
 8001bdc:	89a3      	ldrh	r3, [r4, #12]
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	81a3      	strh	r3, [r4, #12]
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	431d      	orrs	r5, r3
 8001bec:	81a5      	strh	r5, [r4, #12]
 8001bee:	e7cd      	b.n	8001b8c <__smakebuf_r+0x18>
 8001bf0:	080019e1 	.word	0x080019e1

08001bf4 <_free_r>:
 8001bf4:	b538      	push	{r3, r4, r5, lr}
 8001bf6:	4605      	mov	r5, r0
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	d045      	beq.n	8001c88 <_free_r+0x94>
 8001bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c00:	1f0c      	subs	r4, r1, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bfb8      	it	lt
 8001c06:	18e4      	addlt	r4, r4, r3
 8001c08:	f000 fc0c 	bl	8002424 <__malloc_lock>
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <_free_r+0x98>)
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	4610      	mov	r0, r2
 8001c12:	b933      	cbnz	r3, 8001c22 <_free_r+0x2e>
 8001c14:	6063      	str	r3, [r4, #4]
 8001c16:	6014      	str	r4, [r2, #0]
 8001c18:	4628      	mov	r0, r5
 8001c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c1e:	f000 bc02 	b.w	8002426 <__malloc_unlock>
 8001c22:	42a3      	cmp	r3, r4
 8001c24:	d90c      	bls.n	8001c40 <_free_r+0x4c>
 8001c26:	6821      	ldr	r1, [r4, #0]
 8001c28:	1862      	adds	r2, r4, r1
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	bf04      	itt	eq
 8001c2e:	681a      	ldreq	r2, [r3, #0]
 8001c30:	685b      	ldreq	r3, [r3, #4]
 8001c32:	6063      	str	r3, [r4, #4]
 8001c34:	bf04      	itt	eq
 8001c36:	1852      	addeq	r2, r2, r1
 8001c38:	6022      	streq	r2, [r4, #0]
 8001c3a:	6004      	str	r4, [r0, #0]
 8001c3c:	e7ec      	b.n	8001c18 <_free_r+0x24>
 8001c3e:	4613      	mov	r3, r2
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	b10a      	cbz	r2, 8001c48 <_free_r+0x54>
 8001c44:	42a2      	cmp	r2, r4
 8001c46:	d9fa      	bls.n	8001c3e <_free_r+0x4a>
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	1858      	adds	r0, r3, r1
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d10b      	bne.n	8001c68 <_free_r+0x74>
 8001c50:	6820      	ldr	r0, [r4, #0]
 8001c52:	4401      	add	r1, r0
 8001c54:	1858      	adds	r0, r3, r1
 8001c56:	4282      	cmp	r2, r0
 8001c58:	6019      	str	r1, [r3, #0]
 8001c5a:	d1dd      	bne.n	8001c18 <_free_r+0x24>
 8001c5c:	6810      	ldr	r0, [r2, #0]
 8001c5e:	6852      	ldr	r2, [r2, #4]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	4401      	add	r1, r0
 8001c64:	6019      	str	r1, [r3, #0]
 8001c66:	e7d7      	b.n	8001c18 <_free_r+0x24>
 8001c68:	d902      	bls.n	8001c70 <_free_r+0x7c>
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	e7d3      	b.n	8001c18 <_free_r+0x24>
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	1821      	adds	r1, r4, r0
 8001c74:	428a      	cmp	r2, r1
 8001c76:	bf04      	itt	eq
 8001c78:	6811      	ldreq	r1, [r2, #0]
 8001c7a:	6852      	ldreq	r2, [r2, #4]
 8001c7c:	6062      	str	r2, [r4, #4]
 8001c7e:	bf04      	itt	eq
 8001c80:	1809      	addeq	r1, r1, r0
 8001c82:	6021      	streq	r1, [r4, #0]
 8001c84:	605c      	str	r4, [r3, #4]
 8001c86:	e7c7      	b.n	8001c18 <_free_r+0x24>
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000009c 	.word	0x2000009c

08001c90 <_malloc_r>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	1ccd      	adds	r5, r1, #3
 8001c94:	f025 0503 	bic.w	r5, r5, #3
 8001c98:	3508      	adds	r5, #8
 8001c9a:	2d0c      	cmp	r5, #12
 8001c9c:	bf38      	it	cc
 8001c9e:	250c      	movcc	r5, #12
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	4606      	mov	r6, r0
 8001ca4:	db01      	blt.n	8001caa <_malloc_r+0x1a>
 8001ca6:	42a9      	cmp	r1, r5
 8001ca8:	d903      	bls.n	8001cb2 <_malloc_r+0x22>
 8001caa:	230c      	movs	r3, #12
 8001cac:	6033      	str	r3, [r6, #0]
 8001cae:	2000      	movs	r0, #0
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	f000 fbb7 	bl	8002424 <__malloc_lock>
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <_malloc_r+0xac>)
 8001cb8:	6814      	ldr	r4, [r2, #0]
 8001cba:	4621      	mov	r1, r4
 8001cbc:	b991      	cbnz	r1, 8001ce4 <_malloc_r+0x54>
 8001cbe:	4c20      	ldr	r4, [pc, #128]	; (8001d40 <_malloc_r+0xb0>)
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	b91b      	cbnz	r3, 8001ccc <_malloc_r+0x3c>
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f000 fb03 	bl	80022d0 <_sbrk_r>
 8001cca:	6020      	str	r0, [r4, #0]
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f000 fafe 	bl	80022d0 <_sbrk_r>
 8001cd4:	1c43      	adds	r3, r0, #1
 8001cd6:	d124      	bne.n	8001d22 <_malloc_r+0x92>
 8001cd8:	230c      	movs	r3, #12
 8001cda:	6033      	str	r3, [r6, #0]
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f000 fba2 	bl	8002426 <__malloc_unlock>
 8001ce2:	e7e4      	b.n	8001cae <_malloc_r+0x1e>
 8001ce4:	680b      	ldr	r3, [r1, #0]
 8001ce6:	1b5b      	subs	r3, r3, r5
 8001ce8:	d418      	bmi.n	8001d1c <_malloc_r+0x8c>
 8001cea:	2b0b      	cmp	r3, #11
 8001cec:	d90f      	bls.n	8001d0e <_malloc_r+0x7e>
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	50cd      	str	r5, [r1, r3]
 8001cf2:	18cc      	adds	r4, r1, r3
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f000 fb96 	bl	8002426 <__malloc_unlock>
 8001cfa:	f104 000b 	add.w	r0, r4, #11
 8001cfe:	1d23      	adds	r3, r4, #4
 8001d00:	f020 0007 	bic.w	r0, r0, #7
 8001d04:	1ac3      	subs	r3, r0, r3
 8001d06:	d0d3      	beq.n	8001cb0 <_malloc_r+0x20>
 8001d08:	425a      	negs	r2, r3
 8001d0a:	50e2      	str	r2, [r4, r3]
 8001d0c:	e7d0      	b.n	8001cb0 <_malloc_r+0x20>
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	684b      	ldr	r3, [r1, #4]
 8001d12:	bf16      	itet	ne
 8001d14:	6063      	strne	r3, [r4, #4]
 8001d16:	6013      	streq	r3, [r2, #0]
 8001d18:	460c      	movne	r4, r1
 8001d1a:	e7eb      	b.n	8001cf4 <_malloc_r+0x64>
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	6849      	ldr	r1, [r1, #4]
 8001d20:	e7cc      	b.n	8001cbc <_malloc_r+0x2c>
 8001d22:	1cc4      	adds	r4, r0, #3
 8001d24:	f024 0403 	bic.w	r4, r4, #3
 8001d28:	42a0      	cmp	r0, r4
 8001d2a:	d005      	beq.n	8001d38 <_malloc_r+0xa8>
 8001d2c:	1a21      	subs	r1, r4, r0
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f000 face 	bl	80022d0 <_sbrk_r>
 8001d34:	3001      	adds	r0, #1
 8001d36:	d0cf      	beq.n	8001cd8 <_malloc_r+0x48>
 8001d38:	6025      	str	r5, [r4, #0]
 8001d3a:	e7db      	b.n	8001cf4 <_malloc_r+0x64>
 8001d3c:	2000009c 	.word	0x2000009c
 8001d40:	200000a0 	.word	0x200000a0

08001d44 <__sfputc_r>:
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	b410      	push	{r4}
 8001d4c:	6093      	str	r3, [r2, #8]
 8001d4e:	da07      	bge.n	8001d60 <__sfputc_r+0x1c>
 8001d50:	6994      	ldr	r4, [r2, #24]
 8001d52:	42a3      	cmp	r3, r4
 8001d54:	db01      	blt.n	8001d5a <__sfputc_r+0x16>
 8001d56:	290a      	cmp	r1, #10
 8001d58:	d102      	bne.n	8001d60 <__sfputc_r+0x1c>
 8001d5a:	bc10      	pop	{r4}
 8001d5c:	f7ff bcac 	b.w	80016b8 <__swbuf_r>
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	1c58      	adds	r0, r3, #1
 8001d64:	6010      	str	r0, [r2, #0]
 8001d66:	7019      	strb	r1, [r3, #0]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	bc10      	pop	{r4}
 8001d6c:	4770      	bx	lr

08001d6e <__sfputs_r>:
 8001d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d70:	4606      	mov	r6, r0
 8001d72:	460f      	mov	r7, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	18d5      	adds	r5, r2, r3
 8001d78:	42ac      	cmp	r4, r5
 8001d7a:	d101      	bne.n	8001d80 <__sfputs_r+0x12>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	e007      	b.n	8001d90 <__sfputs_r+0x22>
 8001d80:	463a      	mov	r2, r7
 8001d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d86:	4630      	mov	r0, r6
 8001d88:	f7ff ffdc 	bl	8001d44 <__sfputc_r>
 8001d8c:	1c43      	adds	r3, r0, #1
 8001d8e:	d1f3      	bne.n	8001d78 <__sfputs_r+0xa>
 8001d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d94 <_vfiprintf_r>:
 8001d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d98:	460c      	mov	r4, r1
 8001d9a:	b09d      	sub	sp, #116	; 0x74
 8001d9c:	4617      	mov	r7, r2
 8001d9e:	461d      	mov	r5, r3
 8001da0:	4606      	mov	r6, r0
 8001da2:	b118      	cbz	r0, 8001dac <_vfiprintf_r+0x18>
 8001da4:	6983      	ldr	r3, [r0, #24]
 8001da6:	b90b      	cbnz	r3, 8001dac <_vfiprintf_r+0x18>
 8001da8:	f7ff fe36 	bl	8001a18 <__sinit>
 8001dac:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <_vfiprintf_r+0x20c>)
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d158      	bne.n	8001e64 <_vfiprintf_r+0xd0>
 8001db2:	6874      	ldr	r4, [r6, #4]
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	0718      	lsls	r0, r3, #28
 8001db8:	d55e      	bpl.n	8001e78 <_vfiprintf_r+0xe4>
 8001dba:	6923      	ldr	r3, [r4, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05b      	beq.n	8001e78 <_vfiprintf_r+0xe4>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001dca:	2330      	movs	r3, #48	; 0x30
 8001dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001dd0:	9503      	str	r5, [sp, #12]
 8001dd2:	f04f 0b01 	mov.w	fp, #1
 8001dd6:	46b8      	mov	r8, r7
 8001dd8:	4645      	mov	r5, r8
 8001dda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001dde:	b10b      	cbz	r3, 8001de4 <_vfiprintf_r+0x50>
 8001de0:	2b25      	cmp	r3, #37	; 0x25
 8001de2:	d154      	bne.n	8001e8e <_vfiprintf_r+0xfa>
 8001de4:	ebb8 0a07 	subs.w	sl, r8, r7
 8001de8:	d00b      	beq.n	8001e02 <_vfiprintf_r+0x6e>
 8001dea:	4653      	mov	r3, sl
 8001dec:	463a      	mov	r2, r7
 8001dee:	4621      	mov	r1, r4
 8001df0:	4630      	mov	r0, r6
 8001df2:	f7ff ffbc 	bl	8001d6e <__sfputs_r>
 8001df6:	3001      	adds	r0, #1
 8001df8:	f000 80c2 	beq.w	8001f80 <_vfiprintf_r+0x1ec>
 8001dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dfe:	4453      	add	r3, sl
 8001e00:	9309      	str	r3, [sp, #36]	; 0x24
 8001e02:	f898 3000 	ldrb.w	r3, [r8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80ba 	beq.w	8001f80 <_vfiprintf_r+0x1ec>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e16:	9304      	str	r3, [sp, #16]
 8001e18:	9307      	str	r3, [sp, #28]
 8001e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8001e20:	46a8      	mov	r8, r5
 8001e22:	2205      	movs	r2, #5
 8001e24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001e28:	485e      	ldr	r0, [pc, #376]	; (8001fa4 <_vfiprintf_r+0x210>)
 8001e2a:	f7fe f9d1 	bl	80001d0 <memchr>
 8001e2e:	9b04      	ldr	r3, [sp, #16]
 8001e30:	bb78      	cbnz	r0, 8001e92 <_vfiprintf_r+0xfe>
 8001e32:	06d9      	lsls	r1, r3, #27
 8001e34:	bf44      	itt	mi
 8001e36:	2220      	movmi	r2, #32
 8001e38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e3c:	071a      	lsls	r2, r3, #28
 8001e3e:	bf44      	itt	mi
 8001e40:	222b      	movmi	r2, #43	; 0x2b
 8001e42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e46:	782a      	ldrb	r2, [r5, #0]
 8001e48:	2a2a      	cmp	r2, #42	; 0x2a
 8001e4a:	d02a      	beq.n	8001ea2 <_vfiprintf_r+0x10e>
 8001e4c:	9a07      	ldr	r2, [sp, #28]
 8001e4e:	46a8      	mov	r8, r5
 8001e50:	2000      	movs	r0, #0
 8001e52:	250a      	movs	r5, #10
 8001e54:	4641      	mov	r1, r8
 8001e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e5a:	3b30      	subs	r3, #48	; 0x30
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d969      	bls.n	8001f34 <_vfiprintf_r+0x1a0>
 8001e60:	b360      	cbz	r0, 8001ebc <_vfiprintf_r+0x128>
 8001e62:	e024      	b.n	8001eae <_vfiprintf_r+0x11a>
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <_vfiprintf_r+0x214>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	d101      	bne.n	8001e6e <_vfiprintf_r+0xda>
 8001e6a:	68b4      	ldr	r4, [r6, #8]
 8001e6c:	e7a2      	b.n	8001db4 <_vfiprintf_r+0x20>
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <_vfiprintf_r+0x218>)
 8001e70:	429c      	cmp	r4, r3
 8001e72:	bf08      	it	eq
 8001e74:	68f4      	ldreq	r4, [r6, #12]
 8001e76:	e79d      	b.n	8001db4 <_vfiprintf_r+0x20>
 8001e78:	4621      	mov	r1, r4
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f7ff fc6e 	bl	800175c <__swsetup_r>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d09d      	beq.n	8001dc0 <_vfiprintf_r+0x2c>
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	b01d      	add	sp, #116	; 0x74
 8001e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8e:	46a8      	mov	r8, r5
 8001e90:	e7a2      	b.n	8001dd8 <_vfiprintf_r+0x44>
 8001e92:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <_vfiprintf_r+0x210>)
 8001e94:	1a80      	subs	r0, r0, r2
 8001e96:	fa0b f000 	lsl.w	r0, fp, r0
 8001e9a:	4318      	orrs	r0, r3
 8001e9c:	9004      	str	r0, [sp, #16]
 8001e9e:	4645      	mov	r5, r8
 8001ea0:	e7be      	b.n	8001e20 <_vfiprintf_r+0x8c>
 8001ea2:	9a03      	ldr	r2, [sp, #12]
 8001ea4:	1d11      	adds	r1, r2, #4
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	9103      	str	r1, [sp, #12]
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	db01      	blt.n	8001eb2 <_vfiprintf_r+0x11e>
 8001eae:	9207      	str	r2, [sp, #28]
 8001eb0:	e004      	b.n	8001ebc <_vfiprintf_r+0x128>
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	9207      	str	r2, [sp, #28]
 8001eba:	9304      	str	r3, [sp, #16]
 8001ebc:	f898 3000 	ldrb.w	r3, [r8]
 8001ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ec2:	d10e      	bne.n	8001ee2 <_vfiprintf_r+0x14e>
 8001ec4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8001eca:	d138      	bne.n	8001f3e <_vfiprintf_r+0x1aa>
 8001ecc:	9b03      	ldr	r3, [sp, #12]
 8001ece:	1d1a      	adds	r2, r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	9203      	str	r2, [sp, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bfb8      	it	lt
 8001ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001edc:	f108 0802 	add.w	r8, r8, #2
 8001ee0:	9305      	str	r3, [sp, #20]
 8001ee2:	4d33      	ldr	r5, [pc, #204]	; (8001fb0 <_vfiprintf_r+0x21c>)
 8001ee4:	f898 1000 	ldrb.w	r1, [r8]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7fe f970 	bl	80001d0 <memchr>
 8001ef0:	b140      	cbz	r0, 8001f04 <_vfiprintf_r+0x170>
 8001ef2:	2340      	movs	r3, #64	; 0x40
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8001efa:	9b04      	ldr	r3, [sp, #16]
 8001efc:	4303      	orrs	r3, r0
 8001efe:	f108 0801 	add.w	r8, r8, #1
 8001f02:	9304      	str	r3, [sp, #16]
 8001f04:	f898 1000 	ldrb.w	r1, [r8]
 8001f08:	482a      	ldr	r0, [pc, #168]	; (8001fb4 <_vfiprintf_r+0x220>)
 8001f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f0e:	2206      	movs	r2, #6
 8001f10:	f108 0701 	add.w	r7, r8, #1
 8001f14:	f7fe f95c 	bl	80001d0 <memchr>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d037      	beq.n	8001f8c <_vfiprintf_r+0x1f8>
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <_vfiprintf_r+0x224>)
 8001f1e:	bb1b      	cbnz	r3, 8001f68 <_vfiprintf_r+0x1d4>
 8001f20:	9b03      	ldr	r3, [sp, #12]
 8001f22:	3307      	adds	r3, #7
 8001f24:	f023 0307 	bic.w	r3, r3, #7
 8001f28:	3308      	adds	r3, #8
 8001f2a:	9303      	str	r3, [sp, #12]
 8001f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f2e:	444b      	add	r3, r9
 8001f30:	9309      	str	r3, [sp, #36]	; 0x24
 8001f32:	e750      	b.n	8001dd6 <_vfiprintf_r+0x42>
 8001f34:	fb05 3202 	mla	r2, r5, r2, r3
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4688      	mov	r8, r1
 8001f3c:	e78a      	b.n	8001e54 <_vfiprintf_r+0xc0>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f108 0801 	add.w	r8, r8, #1
 8001f44:	9305      	str	r3, [sp, #20]
 8001f46:	4619      	mov	r1, r3
 8001f48:	250a      	movs	r5, #10
 8001f4a:	4640      	mov	r0, r8
 8001f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f50:	3a30      	subs	r2, #48	; 0x30
 8001f52:	2a09      	cmp	r2, #9
 8001f54:	d903      	bls.n	8001f5e <_vfiprintf_r+0x1ca>
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0c3      	beq.n	8001ee2 <_vfiprintf_r+0x14e>
 8001f5a:	9105      	str	r1, [sp, #20]
 8001f5c:	e7c1      	b.n	8001ee2 <_vfiprintf_r+0x14e>
 8001f5e:	fb05 2101 	mla	r1, r5, r1, r2
 8001f62:	2301      	movs	r3, #1
 8001f64:	4680      	mov	r8, r0
 8001f66:	e7f0      	b.n	8001f4a <_vfiprintf_r+0x1b6>
 8001f68:	ab03      	add	r3, sp, #12
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_vfiprintf_r+0x228>)
 8001f70:	a904      	add	r1, sp, #16
 8001f72:	4630      	mov	r0, r6
 8001f74:	f3af 8000 	nop.w
 8001f78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f7c:	4681      	mov	r9, r0
 8001f7e:	d1d5      	bne.n	8001f2c <_vfiprintf_r+0x198>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	065b      	lsls	r3, r3, #25
 8001f84:	f53f af7e 	bmi.w	8001e84 <_vfiprintf_r+0xf0>
 8001f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f8a:	e77d      	b.n	8001e88 <_vfiprintf_r+0xf4>
 8001f8c:	ab03      	add	r3, sp, #12
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4622      	mov	r2, r4
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <_vfiprintf_r+0x228>)
 8001f94:	a904      	add	r1, sp, #16
 8001f96:	4630      	mov	r0, r6
 8001f98:	f000 f888 	bl	80020ac <_printf_i>
 8001f9c:	e7ec      	b.n	8001f78 <_vfiprintf_r+0x1e4>
 8001f9e:	bf00      	nop
 8001fa0:	080024e0 	.word	0x080024e0
 8001fa4:	08002520 	.word	0x08002520
 8001fa8:	08002500 	.word	0x08002500
 8001fac:	080024c0 	.word	0x080024c0
 8001fb0:	08002526 	.word	0x08002526
 8001fb4:	0800252a 	.word	0x0800252a
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	08001d6f 	.word	0x08001d6f

08001fc0 <_printf_common>:
 8001fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	4691      	mov	r9, r2
 8001fc6:	461f      	mov	r7, r3
 8001fc8:	688a      	ldr	r2, [r1, #8]
 8001fca:	690b      	ldr	r3, [r1, #16]
 8001fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bfb8      	it	lt
 8001fd4:	4613      	movlt	r3, r2
 8001fd6:	f8c9 3000 	str.w	r3, [r9]
 8001fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fde:	4606      	mov	r6, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	b112      	cbz	r2, 8001fea <_printf_common+0x2a>
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f8c9 3000 	str.w	r3, [r9]
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	0699      	lsls	r1, r3, #26
 8001fee:	bf42      	ittt	mi
 8001ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ff4:	3302      	addmi	r3, #2
 8001ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8001ffa:	6825      	ldr	r5, [r4, #0]
 8001ffc:	f015 0506 	ands.w	r5, r5, #6
 8002000:	d107      	bne.n	8002012 <_printf_common+0x52>
 8002002:	f104 0a19 	add.w	sl, r4, #25
 8002006:	68e3      	ldr	r3, [r4, #12]
 8002008:	f8d9 2000 	ldr.w	r2, [r9]
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	42ab      	cmp	r3, r5
 8002010:	dc28      	bgt.n	8002064 <_printf_common+0xa4>
 8002012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	3300      	adds	r3, #0
 800201a:	bf18      	it	ne
 800201c:	2301      	movne	r3, #1
 800201e:	0692      	lsls	r2, r2, #26
 8002020:	d42d      	bmi.n	800207e <_printf_common+0xbe>
 8002022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002026:	4639      	mov	r1, r7
 8002028:	4630      	mov	r0, r6
 800202a:	47c0      	blx	r8
 800202c:	3001      	adds	r0, #1
 800202e:	d020      	beq.n	8002072 <_printf_common+0xb2>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	68e5      	ldr	r5, [r4, #12]
 8002034:	f8d9 2000 	ldr.w	r2, [r9]
 8002038:	f003 0306 	and.w	r3, r3, #6
 800203c:	2b04      	cmp	r3, #4
 800203e:	bf08      	it	eq
 8002040:	1aad      	subeq	r5, r5, r2
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	6922      	ldr	r2, [r4, #16]
 8002046:	bf0c      	ite	eq
 8002048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800204c:	2500      	movne	r5, #0
 800204e:	4293      	cmp	r3, r2
 8002050:	bfc4      	itt	gt
 8002052:	1a9b      	subgt	r3, r3, r2
 8002054:	18ed      	addgt	r5, r5, r3
 8002056:	f04f 0900 	mov.w	r9, #0
 800205a:	341a      	adds	r4, #26
 800205c:	454d      	cmp	r5, r9
 800205e:	d11a      	bne.n	8002096 <_printf_common+0xd6>
 8002060:	2000      	movs	r0, #0
 8002062:	e008      	b.n	8002076 <_printf_common+0xb6>
 8002064:	2301      	movs	r3, #1
 8002066:	4652      	mov	r2, sl
 8002068:	4639      	mov	r1, r7
 800206a:	4630      	mov	r0, r6
 800206c:	47c0      	blx	r8
 800206e:	3001      	adds	r0, #1
 8002070:	d103      	bne.n	800207a <_printf_common+0xba>
 8002072:	f04f 30ff 	mov.w	r0, #4294967295
 8002076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800207a:	3501      	adds	r5, #1
 800207c:	e7c3      	b.n	8002006 <_printf_common+0x46>
 800207e:	18e1      	adds	r1, r4, r3
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	2030      	movs	r0, #48	; 0x30
 8002084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002088:	4422      	add	r2, r4
 800208a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800208e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002092:	3302      	adds	r3, #2
 8002094:	e7c5      	b.n	8002022 <_printf_common+0x62>
 8002096:	2301      	movs	r3, #1
 8002098:	4622      	mov	r2, r4
 800209a:	4639      	mov	r1, r7
 800209c:	4630      	mov	r0, r6
 800209e:	47c0      	blx	r8
 80020a0:	3001      	adds	r0, #1
 80020a2:	d0e6      	beq.n	8002072 <_printf_common+0xb2>
 80020a4:	f109 0901 	add.w	r9, r9, #1
 80020a8:	e7d8      	b.n	800205c <_printf_common+0x9c>
	...

080020ac <_printf_i>:
 80020ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80020b4:	460c      	mov	r4, r1
 80020b6:	7e09      	ldrb	r1, [r1, #24]
 80020b8:	b085      	sub	sp, #20
 80020ba:	296e      	cmp	r1, #110	; 0x6e
 80020bc:	4617      	mov	r7, r2
 80020be:	4606      	mov	r6, r0
 80020c0:	4698      	mov	r8, r3
 80020c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80020c4:	f000 80b3 	beq.w	800222e <_printf_i+0x182>
 80020c8:	d822      	bhi.n	8002110 <_printf_i+0x64>
 80020ca:	2963      	cmp	r1, #99	; 0x63
 80020cc:	d036      	beq.n	800213c <_printf_i+0x90>
 80020ce:	d80a      	bhi.n	80020e6 <_printf_i+0x3a>
 80020d0:	2900      	cmp	r1, #0
 80020d2:	f000 80b9 	beq.w	8002248 <_printf_i+0x19c>
 80020d6:	2958      	cmp	r1, #88	; 0x58
 80020d8:	f000 8083 	beq.w	80021e2 <_printf_i+0x136>
 80020dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80020e4:	e032      	b.n	800214c <_printf_i+0xa0>
 80020e6:	2964      	cmp	r1, #100	; 0x64
 80020e8:	d001      	beq.n	80020ee <_printf_i+0x42>
 80020ea:	2969      	cmp	r1, #105	; 0x69
 80020ec:	d1f6      	bne.n	80020dc <_printf_i+0x30>
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	0605      	lsls	r5, r0, #24
 80020f4:	f103 0104 	add.w	r1, r3, #4
 80020f8:	d52a      	bpl.n	8002150 <_printf_i+0xa4>
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6011      	str	r1, [r2, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da03      	bge.n	800210a <_printf_i+0x5e>
 8002102:	222d      	movs	r2, #45	; 0x2d
 8002104:	425b      	negs	r3, r3
 8002106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800210a:	486f      	ldr	r0, [pc, #444]	; (80022c8 <_printf_i+0x21c>)
 800210c:	220a      	movs	r2, #10
 800210e:	e039      	b.n	8002184 <_printf_i+0xd8>
 8002110:	2973      	cmp	r1, #115	; 0x73
 8002112:	f000 809d 	beq.w	8002250 <_printf_i+0x1a4>
 8002116:	d808      	bhi.n	800212a <_printf_i+0x7e>
 8002118:	296f      	cmp	r1, #111	; 0x6f
 800211a:	d020      	beq.n	800215e <_printf_i+0xb2>
 800211c:	2970      	cmp	r1, #112	; 0x70
 800211e:	d1dd      	bne.n	80020dc <_printf_i+0x30>
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6023      	str	r3, [r4, #0]
 8002128:	e003      	b.n	8002132 <_printf_i+0x86>
 800212a:	2975      	cmp	r1, #117	; 0x75
 800212c:	d017      	beq.n	800215e <_printf_i+0xb2>
 800212e:	2978      	cmp	r1, #120	; 0x78
 8002130:	d1d4      	bne.n	80020dc <_printf_i+0x30>
 8002132:	2378      	movs	r3, #120	; 0x78
 8002134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002138:	4864      	ldr	r0, [pc, #400]	; (80022cc <_printf_i+0x220>)
 800213a:	e055      	b.n	80021e8 <_printf_i+0x13c>
 800213c:	6813      	ldr	r3, [r2, #0]
 800213e:	1d19      	adds	r1, r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6011      	str	r1, [r2, #0]
 8002144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800214c:	2301      	movs	r3, #1
 800214e:	e08c      	b.n	800226a <_printf_i+0x1be>
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002158:	bf18      	it	ne
 800215a:	b21b      	sxthne	r3, r3
 800215c:	e7cf      	b.n	80020fe <_printf_i+0x52>
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	6825      	ldr	r5, [r4, #0]
 8002162:	1d18      	adds	r0, r3, #4
 8002164:	6010      	str	r0, [r2, #0]
 8002166:	0628      	lsls	r0, r5, #24
 8002168:	d501      	bpl.n	800216e <_printf_i+0xc2>
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e002      	b.n	8002174 <_printf_i+0xc8>
 800216e:	0668      	lsls	r0, r5, #25
 8002170:	d5fb      	bpl.n	800216a <_printf_i+0xbe>
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4854      	ldr	r0, [pc, #336]	; (80022c8 <_printf_i+0x21c>)
 8002176:	296f      	cmp	r1, #111	; 0x6f
 8002178:	bf14      	ite	ne
 800217a:	220a      	movne	r2, #10
 800217c:	2208      	moveq	r2, #8
 800217e:	2100      	movs	r1, #0
 8002180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002184:	6865      	ldr	r5, [r4, #4]
 8002186:	60a5      	str	r5, [r4, #8]
 8002188:	2d00      	cmp	r5, #0
 800218a:	f2c0 8095 	blt.w	80022b8 <_printf_i+0x20c>
 800218e:	6821      	ldr	r1, [r4, #0]
 8002190:	f021 0104 	bic.w	r1, r1, #4
 8002194:	6021      	str	r1, [r4, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13d      	bne.n	8002216 <_printf_i+0x16a>
 800219a:	2d00      	cmp	r5, #0
 800219c:	f040 808e 	bne.w	80022bc <_printf_i+0x210>
 80021a0:	4665      	mov	r5, ip
 80021a2:	2a08      	cmp	r2, #8
 80021a4:	d10b      	bne.n	80021be <_printf_i+0x112>
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	07db      	lsls	r3, r3, #31
 80021aa:	d508      	bpl.n	80021be <_printf_i+0x112>
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	6862      	ldr	r2, [r4, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	bfde      	ittt	le
 80021b4:	2330      	movle	r3, #48	; 0x30
 80021b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80021ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80021be:	ebac 0305 	sub.w	r3, ip, r5
 80021c2:	6123      	str	r3, [r4, #16]
 80021c4:	f8cd 8000 	str.w	r8, [sp]
 80021c8:	463b      	mov	r3, r7
 80021ca:	aa03      	add	r2, sp, #12
 80021cc:	4621      	mov	r1, r4
 80021ce:	4630      	mov	r0, r6
 80021d0:	f7ff fef6 	bl	8001fc0 <_printf_common>
 80021d4:	3001      	adds	r0, #1
 80021d6:	d14d      	bne.n	8002274 <_printf_i+0x1c8>
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	b005      	add	sp, #20
 80021de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021e2:	4839      	ldr	r0, [pc, #228]	; (80022c8 <_printf_i+0x21c>)
 80021e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	6821      	ldr	r1, [r4, #0]
 80021ec:	1d1d      	adds	r5, r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6015      	str	r5, [r2, #0]
 80021f2:	060a      	lsls	r2, r1, #24
 80021f4:	d50b      	bpl.n	800220e <_printf_i+0x162>
 80021f6:	07ca      	lsls	r2, r1, #31
 80021f8:	bf44      	itt	mi
 80021fa:	f041 0120 	orrmi.w	r1, r1, #32
 80021fe:	6021      	strmi	r1, [r4, #0]
 8002200:	b91b      	cbnz	r3, 800220a <_printf_i+0x15e>
 8002202:	6822      	ldr	r2, [r4, #0]
 8002204:	f022 0220 	bic.w	r2, r2, #32
 8002208:	6022      	str	r2, [r4, #0]
 800220a:	2210      	movs	r2, #16
 800220c:	e7b7      	b.n	800217e <_printf_i+0xd2>
 800220e:	064d      	lsls	r5, r1, #25
 8002210:	bf48      	it	mi
 8002212:	b29b      	uxthmi	r3, r3
 8002214:	e7ef      	b.n	80021f6 <_printf_i+0x14a>
 8002216:	4665      	mov	r5, ip
 8002218:	fbb3 f1f2 	udiv	r1, r3, r2
 800221c:	fb02 3311 	mls	r3, r2, r1, r3
 8002220:	5cc3      	ldrb	r3, [r0, r3]
 8002222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002226:	460b      	mov	r3, r1
 8002228:	2900      	cmp	r1, #0
 800222a:	d1f5      	bne.n	8002218 <_printf_i+0x16c>
 800222c:	e7b9      	b.n	80021a2 <_printf_i+0xf6>
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	6825      	ldr	r5, [r4, #0]
 8002232:	6961      	ldr	r1, [r4, #20]
 8002234:	1d18      	adds	r0, r3, #4
 8002236:	6010      	str	r0, [r2, #0]
 8002238:	0628      	lsls	r0, r5, #24
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	d501      	bpl.n	8002242 <_printf_i+0x196>
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	e002      	b.n	8002248 <_printf_i+0x19c>
 8002242:	066a      	lsls	r2, r5, #25
 8002244:	d5fb      	bpl.n	800223e <_printf_i+0x192>
 8002246:	8019      	strh	r1, [r3, #0]
 8002248:	2300      	movs	r3, #0
 800224a:	6123      	str	r3, [r4, #16]
 800224c:	4665      	mov	r5, ip
 800224e:	e7b9      	b.n	80021c4 <_printf_i+0x118>
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	1d19      	adds	r1, r3, #4
 8002254:	6011      	str	r1, [r2, #0]
 8002256:	681d      	ldr	r5, [r3, #0]
 8002258:	6862      	ldr	r2, [r4, #4]
 800225a:	2100      	movs	r1, #0
 800225c:	4628      	mov	r0, r5
 800225e:	f7fd ffb7 	bl	80001d0 <memchr>
 8002262:	b108      	cbz	r0, 8002268 <_printf_i+0x1bc>
 8002264:	1b40      	subs	r0, r0, r5
 8002266:	6060      	str	r0, [r4, #4]
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	6123      	str	r3, [r4, #16]
 800226c:	2300      	movs	r3, #0
 800226e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002272:	e7a7      	b.n	80021c4 <_printf_i+0x118>
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	462a      	mov	r2, r5
 8002278:	4639      	mov	r1, r7
 800227a:	4630      	mov	r0, r6
 800227c:	47c0      	blx	r8
 800227e:	3001      	adds	r0, #1
 8002280:	d0aa      	beq.n	80021d8 <_printf_i+0x12c>
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	079b      	lsls	r3, r3, #30
 8002286:	d413      	bmi.n	80022b0 <_printf_i+0x204>
 8002288:	68e0      	ldr	r0, [r4, #12]
 800228a:	9b03      	ldr	r3, [sp, #12]
 800228c:	4298      	cmp	r0, r3
 800228e:	bfb8      	it	lt
 8002290:	4618      	movlt	r0, r3
 8002292:	e7a3      	b.n	80021dc <_printf_i+0x130>
 8002294:	2301      	movs	r3, #1
 8002296:	464a      	mov	r2, r9
 8002298:	4639      	mov	r1, r7
 800229a:	4630      	mov	r0, r6
 800229c:	47c0      	blx	r8
 800229e:	3001      	adds	r0, #1
 80022a0:	d09a      	beq.n	80021d8 <_printf_i+0x12c>
 80022a2:	3501      	adds	r5, #1
 80022a4:	68e3      	ldr	r3, [r4, #12]
 80022a6:	9a03      	ldr	r2, [sp, #12]
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	42ab      	cmp	r3, r5
 80022ac:	dcf2      	bgt.n	8002294 <_printf_i+0x1e8>
 80022ae:	e7eb      	b.n	8002288 <_printf_i+0x1dc>
 80022b0:	2500      	movs	r5, #0
 80022b2:	f104 0919 	add.w	r9, r4, #25
 80022b6:	e7f5      	b.n	80022a4 <_printf_i+0x1f8>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ac      	bne.n	8002216 <_printf_i+0x16a>
 80022bc:	7803      	ldrb	r3, [r0, #0]
 80022be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022c6:	e76c      	b.n	80021a2 <_printf_i+0xf6>
 80022c8:	08002531 	.word	0x08002531
 80022cc:	08002542 	.word	0x08002542

080022d0 <_sbrk_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4c06      	ldr	r4, [pc, #24]	; (80022ec <_sbrk_r+0x1c>)
 80022d4:	2300      	movs	r3, #0
 80022d6:	4605      	mov	r5, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	6023      	str	r3, [r4, #0]
 80022dc:	f7ff f8de 	bl	800149c <_sbrk>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_sbrk_r+0x1a>
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_sbrk_r+0x1a>
 80022e8:	602b      	str	r3, [r5, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	200000ec 	.word	0x200000ec

080022f0 <__sread>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	460c      	mov	r4, r1
 80022f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f8:	f000 f896 	bl	8002428 <_read_r>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	bfab      	itete	ge
 8002300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002302:	89a3      	ldrhlt	r3, [r4, #12]
 8002304:	181b      	addge	r3, r3, r0
 8002306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800230a:	bfac      	ite	ge
 800230c:	6563      	strge	r3, [r4, #84]	; 0x54
 800230e:	81a3      	strhlt	r3, [r4, #12]
 8002310:	bd10      	pop	{r4, pc}

08002312 <__swrite>:
 8002312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002316:	461f      	mov	r7, r3
 8002318:	898b      	ldrh	r3, [r1, #12]
 800231a:	05db      	lsls	r3, r3, #23
 800231c:	4605      	mov	r5, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4616      	mov	r6, r2
 8002322:	d505      	bpl.n	8002330 <__swrite+0x1e>
 8002324:	2302      	movs	r3, #2
 8002326:	2200      	movs	r2, #0
 8002328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232c:	f000 f868 	bl	8002400 <_lseek_r>
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	4632      	mov	r2, r6
 800233e:	463b      	mov	r3, r7
 8002340:	4628      	mov	r0, r5
 8002342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002346:	f000 b817 	b.w	8002378 <_write_r>

0800234a <__sseek>:
 800234a:	b510      	push	{r4, lr}
 800234c:	460c      	mov	r4, r1
 800234e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002352:	f000 f855 	bl	8002400 <_lseek_r>
 8002356:	1c43      	adds	r3, r0, #1
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	bf15      	itete	ne
 800235c:	6560      	strne	r0, [r4, #84]	; 0x54
 800235e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002366:	81a3      	strheq	r3, [r4, #12]
 8002368:	bf18      	it	ne
 800236a:	81a3      	strhne	r3, [r4, #12]
 800236c:	bd10      	pop	{r4, pc}

0800236e <__sclose>:
 800236e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002372:	f000 b813 	b.w	800239c <_close_r>
	...

08002378 <_write_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4c07      	ldr	r4, [pc, #28]	; (8002398 <_write_r+0x20>)
 800237c:	4605      	mov	r5, r0
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	2200      	movs	r2, #0
 8002384:	6022      	str	r2, [r4, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f7ff f83b 	bl	8001402 <_write>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_write_r+0x1e>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b103      	cbz	r3, 8002396 <_write_r+0x1e>
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	200000ec 	.word	0x200000ec

0800239c <_close_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4c06      	ldr	r4, [pc, #24]	; (80023b8 <_close_r+0x1c>)
 80023a0:	2300      	movs	r3, #0
 80023a2:	4605      	mov	r5, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	6023      	str	r3, [r4, #0]
 80023a8:	f7ff f847 	bl	800143a <_close>
 80023ac:	1c43      	adds	r3, r0, #1
 80023ae:	d102      	bne.n	80023b6 <_close_r+0x1a>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	b103      	cbz	r3, 80023b6 <_close_r+0x1a>
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
 80023b8:	200000ec 	.word	0x200000ec

080023bc <_fstat_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4c07      	ldr	r4, [pc, #28]	; (80023dc <_fstat_r+0x20>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	4605      	mov	r5, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	f7ff f841 	bl	8001450 <_fstat>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	d102      	bne.n	80023d8 <_fstat_r+0x1c>
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	b103      	cbz	r3, 80023d8 <_fstat_r+0x1c>
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	bd38      	pop	{r3, r4, r5, pc}
 80023da:	bf00      	nop
 80023dc:	200000ec 	.word	0x200000ec

080023e0 <_isatty_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4c06      	ldr	r4, [pc, #24]	; (80023fc <_isatty_r+0x1c>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	4605      	mov	r5, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	6023      	str	r3, [r4, #0]
 80023ec:	f7ff f83f 	bl	800146e <_isatty>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_isatty_r+0x1a>
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_isatty_r+0x1a>
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200000ec 	.word	0x200000ec

08002400 <_lseek_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4c07      	ldr	r4, [pc, #28]	; (8002420 <_lseek_r+0x20>)
 8002404:	4605      	mov	r5, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	2200      	movs	r2, #0
 800240c:	6022      	str	r2, [r4, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff f837 	bl	8001482 <_lseek>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_lseek_r+0x1e>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	b103      	cbz	r3, 800241e <_lseek_r+0x1e>
 800241c:	602b      	str	r3, [r5, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200000ec 	.word	0x200000ec

08002424 <__malloc_lock>:
 8002424:	4770      	bx	lr

08002426 <__malloc_unlock>:
 8002426:	4770      	bx	lr

08002428 <_read_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4c07      	ldr	r4, [pc, #28]	; (8002448 <_read_r+0x20>)
 800242c:	4605      	mov	r5, r0
 800242e:	4608      	mov	r0, r1
 8002430:	4611      	mov	r1, r2
 8002432:	2200      	movs	r2, #0
 8002434:	6022      	str	r2, [r4, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f7fe ffc6 	bl	80013c8 <_read>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_read_r+0x1e>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	b103      	cbz	r3, 8002446 <_read_r+0x1e>
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	200000ec 	.word	0x200000ec

0800244c <_init>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr

08002458 <_fini>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr
